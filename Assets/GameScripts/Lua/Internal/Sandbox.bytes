local Sandbox = {}
local chunkCache = {}
local sandboxMeta = {
    __index = _G,
    __gc = function(sandbox)
        print("Sandbox", "LuaGC release sandbox " .. tostring(sandbox))
    end,
}

function Sandbox.CreateSandbox(gameObject)
    if gameObject == nil or gameObject:IsNull() then
        error("Sandbox", "create sandbox failed")
        return
    end
    local box = setmetatable({
        this = gameObject,
        REF = {},
    }, sandboxMeta)
    return box
end

function Sandbox.DestroySandbox(sandbox)
    setmetatable(sandbox, nil)
    for k in pairs(sandbox) do
        sandbox[k] = nil
    end
end

local function LoadPackage(...)
    for _, loader in ipairs(package.searchers) do
        local func = loader(...)
        if type(func) == 'function' then
            return func
        end
    end
end

function Sandbox:DoChunk(path, forceReload)
    if string.isNilOrWhiteSpace(path) then
        error("Sandbox", "DoChunk path is nil or empty? DoChunk failed!")
        return
    end
    local func = chunkCache[path]
    if func == nil or forceReload then
        func = LoadPackage(path)
        if func == nil then
            error("Sandbox", string.format("DoChunk Failed to load path: %s \nref by: %s.", path, self.this.name))
        else
            chunkCache[path] = func
        end
    end
    if func ~= nil then
        setfenv(func, self)()
    end
end

return Sandbox