syntax = "proto3";

message BevTreeRoot {
}

enum BevAbortMode {
    BevAbortMode_None          = 0;
    BevAbortMode_Self          = 1;
    BevAbortMode_LowerPriority = 2;
    BevAbortMode_Both          = 3;
}
enum BevNodeType {
    BevNodeType_None           = 0;
    BevNodeType_Composite      = 1;
    BevNodeType_Action         = 2;
    BevNodeType_Condition      = 3;
    BevNodeType_RandomSelector = 4;
}

message Composite {
    BevAbortMode abortMode = 1;   // help=[打断类型，参考BevAbortMode]
}

enum DecorateType {
    DecorateType_None = 0;
    DecorateType_Not  = 1;
}
message Decorate {
    DecorateType decorateType = 1;   // help=[装饰节点类型 作用参考BevNode的DecorateRun映射]
}
message RandomSelector {
    repeated string weights = 1;   // help=[子节点权重变量]
}
message CodeNode {
    string      name     = 1;   // help=[节点备注名称]
    string      type     = 2;
    BevNodeType nodeType = 4;
    oneof       prop {
        BevTreeRoot    bevTree        = 9;
        Composite      selector       = 10;
        Composite      sequence       = 11;
        RandomSelector randomSelector = 12;

        // ActionGenRandom         actionGenRandom         = 13;
        // ActionSetFaceDirection  actionSetFaceDirection  = 15;
        // ActionSetVar            actionSetVar            = 17;
        // ActionWait              actionWait              = 18;
        // ActionSetAction         actionSetAction         = 20;
        // ActionSetActionWithNext actionSetActionWithNext = 30;
        // ActionCreateSnippet     actionCreateSnippet     = 32;
        // ActionVarChange         actionVarChange         = 39;
        // ActionUseSkillWithNext  actionUseSkillWithNext  = 41;
        // ActionPlayCmd           actionPlayCmd           = 44;
        // ActionTryTutorial       actionTryTutorial       = 45;
        // ActionPlayCinema        actionPlayCinema        = 46;
        // ActionSuicide           actionSuicide           = 47;
        // ActionStartWuShuang     actionStartWuShuang     = 49;

        // ConditionCheckDistance    conditionCheckDistance    = 21;
        // ConditionCheckDistanceX   conditionCheckDistanceX   = 22;
        // ConditionCheckDistanceY   conditionCheckDistanceY   = 23;
        // ConditionCheckFace        conditionCheckFace        = 24;
        // ConditionCheckHp          conditionCheckHp          = 26;
        // ConditionCheckInPassive   conditionCheckInPassive   = 27;
        // ConditionCheckVar         conditionCheckVar         = 28;
        // ConditionCheckAction      conditionCheckAction      = 29;
        // ConditionPhase            conditionPhase            = 33;
        // ConditionAngle            conditionAngle            = 34;
        // ConditionRangeActors      conditionRangeActors      = 35;
        // ConditionMoveDetect       conditionMoveDetect       = 36;
        // ConditionActionInCD       conditionActionInCD       = 40;
        // ConditionCheckSelfFace    conditionCheckSelfFace    = 42;
        // ConditionCheckSp          conditionCheckSp          = 43;
        // ConditionCheckWsp         conditionCheckWsp         = 48;
        // ConditionIsFightState     conditionIsFightState     = 50;
        // ConditionIsSlideUpAllowed conditionIsSlideUpAllowed = 51;
    }
    repeated CodeNode children  = 3;
    repeated Decorate decorates = 5;
}

enum InputCmd {
    InputCmd_CmdNone     = 0;
    InputCmd_Tap         = 1;
    InputCmd_Tap2        = 12;
    InputCmd_Tap3        = 13;
    InputCmd_Tap4        = 14;
    InputCmd_ReverseTap  = 17;
    InputCmd_ReverseTap2 = 18;
    InputCmd_ReverseTap3 = 19;
    InputCmd_ReverseTap4 = 20;
    InputCmd_Click       = 21;
    InputCmd_Click2      = 22;
    InputCmd_Click3      = 23;
    InputCmd_Click4      = 24;

    InputCmd_Move = 15;
    InputCmd_Rush = 16;

    InputCmd_SlideForward         = 2;
    InputCmd_SlideUp              = 3;
    InputCmd_SlideDown            = 4;
    InputCmd_UiClick              = 5;
    InputCmd_UiDown               = 6;
    InputCmd_UiUp                 = 7;
    InputCmd_SlideBack            = 8;
    InputCmd_Slide                = 9;
    InputCmd_UltimateSkill        = 11;
    InputCmd_DoubleUiTap          = 55;
    InputCmd_MultiTap             = 56;
    InputCmd_HoldStart            = 101;
    InputCmd_HoldEnd              = 102;
    InputCmd_ProtraitButton       = 200;
    InputCmd_ProtraitSlideForward = 202;
    InputCmd_ProtraitSlideUp      = 203;
    InputCmd_ProtraitSlideDown    = 204;
    InputCmd_MultiClick           = 400;
    InputCmd_SpecForward          = 502;
    InputCmd_SpecBackward         = 508;
    InputCmd_SpecDown             = 506;
    InputCmd_SpecUp               = 507;
    InputCmd_Weapon               = 600;
    InputCmd_Jump                 = 800;
    InputCmd_Fall                 = 801;
    InputCmd_DirHold              = 802;
    InputCmd_CmdAuto              = 1000;
}

enum ActionType {
    ActionType_None           = 0;
    ActionType_Attack         = 1;
    ActionType_Standby        = 2;
    ActionType_Walk           = 3;
    ActionType_Run            = 4;
    ActionType_NoLearn        = 5;
    ActionType_Ultimate       = 6;
    ActionType_Passive        = 7;
    ActionType_Dead           = 8;
    ActionType_Drop           = 9;
    ActionType_WinPose        = 10;
    ActionType_Pose           = 11;
    ActionType_ProtectStandby = 12;
    ActionType_ProtectPassive = 13;
}

enum CodeTarget {
    CodeTarget_Self   = 0;
    CodeTarget_Target = 1;
}

enum CodeCompareOperation {
    CodeCompareOperation_Equal             = 0;
    CodeCompareOperation_NotEqual          = 1;
    CodeCompareOperation_BiggerThan        = 2;
    CodeCompareOperation_LessThan          = 3;
    CodeCompareOperation_BiggerThanOrEqual = 4;
    CodeCompareOperation_LessThanOrEqual   = 5;
}

enum CodeDistanceFaceSymbol {
    CodeDistanceFaceSymbol_None      = 0;
    CodeDistanceFaceSymbol_Facing    = 1;
    CodeDistanceFaceSymbol_NotFacing = 2;
}

enum CodeFaceAction {
    CodeFaceAction_Facing    = 0;
    CodeFaceAction_NotFacing = 1;
    CodeFaceAction_Left      = 2;
    CodeFaceAction_Right     = 3;
    CodeFaceAction_Reverse   = 4;
}

enum CodeSetActionType {
    CodeSetActionType_Strong      = 0;
    CodeSetActionType_ProtectTime = 1;
    CodeSetActionType_Weak        = 2;
}

enum CodeValueType {
    CodeValueType_Value      = 0;
    CodeValueType_Ratio      = 1;
    CodeValueType_Expression = 2;
}

// message ActionVarChange {        // help=[更改变量]
//     string varname        = 1;   // help=[外部变量名]
//     string changeVal      = 2;   // help=[设置的值]
//     bool   isGlobal       = 3;   // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
//     bool   isCountDownVar = 4;   // help=[是否为计时器变量]
// }

// message ActionGenRandom {    // help=[生成随机数]
//     string varname    = 1;   // help=[自定义外部变量名]
//     float  rangeLower = 2;   // help=[下界]
//     float  rangeUpper = 3;   // help=[上界]
//     bool   isGlobal   = 4;   // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
// }

// message ActionSetAction {                  // help=[设置单个动作]
//     CodeSetActionType setActionType = 2;   // help=[动作切换方式，参考CodeSetActionType]
//     bool              force         = 3;   // help=[强制切动作，不考虑任何CanChangeAction条件]
//     InputCmd          cmd           = 4;   // help=[指令]
//     bool              isCmd         = 5;   // help=[是否使用cmd字段]
//     string            duration      = 6;   // help=[最长持续时间]
//     string            actionName    = 7;   // help=[动作名]
// }

// message ActionSetActionWithNext {   // help=[设置一连串动作]
//     bool   force      = 3;          // help=[强制切动作，不考虑任何CanChangeAction条件]
//     float  duration   = 6;          // help=[最长持续时间]
//     string actionName = 7;          // help=[动作名]
// }

// message ActionSetFaceDirection {    // help=[设置角色朝向]
//     CodeFaceAction checkFace = 2;   // help=[朝向改变方式，参考CodeFaceAction]
// }

// message ActionSetVar {           // help=[设置一个变量的值]
//     string varname        = 1;   // help=[外部变量名]
//     string valueName      = 3;   // help=[设置的值]
//     bool   isGlobal       = 4;   // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
//     bool   isCountDownVar = 5;   // help=[是否为计时器变量]
// }

// message ActionWait {        // help=[设置AI等待时间]
//     float duration   = 1;   // help=[固定时间]
//     float minTime    = 2;   // help=[随机时间下界]
//     float maxTime    = 3;   // help=[随机时间上界]
//     bool  randomTime = 4;   // help=[是否使用随机时间]
// }

// message ActionTryTutorial {   // help=[设置新手引导]
//     string tutorialId = 1;    // help=[新手引导ID]
// }

// message ActionPlayCinema {   // help=[播放小剧场脚本]
//     string cinemaId = 1;     // help=[剧情ID]
// }

// message ActionCreateSnippet {   // help=[！废弃！移动到指定位置]
//     string fileName = 1;        // help=[引用的Snippet的名称]
// }

// message ActionUseSkillWithNext {   // help=[设置使用一连串动作的技能]
//     string actionName = 1;         // help=[动作名]
//     bool   force      = 2;         // help=[强制执行UseSkill逻辑，否则会先做passive、protectTime等actionType检查]
// }

// message ActionPlayCmd {   // help=[处理一个指令]
//     InputCmd cmd  = 1;    // help=[指令]
//     int32    dirX = 2;    // help=[大于0朝右 小于0朝左 等于0没有方向]
// }

// message ActionStartWuShuang {   // help=[启动无双状态]
// }

// message ConditionCheckAction {   // help=[检查当前动作]
//     CodeTarget target     = 1;   // help=[目标]
//     ActionType actionType = 2;   // help=[动作类型，参考ActionType]
//     string     action     = 3;   // help=[动作名]
// }

// message ConditionCheckDistance {                 // help=[检查与主角绝对距离]
//     CodeCompareOperation compareOperation = 1;   // help=[比较符号]
//     float                value            = 2;   // help=[比较值，unity坐标距离]
// }

// message ConditionCheckDistanceX {                  // help=[检查与主角X轴距离]
//     CodeCompareOperation   compareOperation = 2;   // help=[比较符号]
//     float                  value            = 3;   // help=[比较值，unity坐标距离]
//     CodeDistanceFaceSymbol faceSymbol       = 5;   // help=[面向检测，参考CodeDistanceFaceSymbol]
//     float                  toleranceY       = 6;   // help=[Y方向误差值，误差值在该范围外直接检测失败]
// }

// message ConditionCheckDistanceY {                  // help=[检查与主角Y轴距离]
//     CodeCompareOperation   compareOperation = 2;   // help=[比较符号]
//     float                  value            = 3;   // help=[比较值，unity坐标距离]
//     CodeDistanceFaceSymbol faceSymbol       = 6;   // help=[面向检测，参考CodeDistanceFaceSymbol]
//     bool                   isAbsDistance    = 5;   // help=[比较时使用绝对值]
// }

// message ConditionCheckFace {        // help=[检查与主角朝向关系]
//     CodeFaceAction checkFace = 2;   // help=[朝向改变方式，参考CodeFaceAction]
// }

// message ConditionMoveDetect {   // help=[检查移动是否被阻挡]
// }

// message ConditionIsFightState {   // help=[检查是否在指定的战斗状态]
//     // FightState fightState = 1;    // help=[对应战斗状态]
// }

// message ConditionRangeActors {            // help=[检查指定范围内是否有角色]
//     float width                    = 1;   // help=[检测距离半宽]
//     float centerOffset             = 2;   // help=[受朝向影响的中心点偏移]
//     bool  ignoreFreeMovementBounds = 3;   // help=[忽略有freeMovement的角色的包围盒（不纳入检测角色）]
//     float centerOffsetY            = 4;   // help=[Y方向中心点偏移，不填默认为角色Y中心位置]
//     float height                   = 5;   // help=[检测距离半高，不填默认为角色半高]
// }

// message ConditionCheckHp {                       // help=[检查当前HP值]
//     CodeTarget           target           = 1;   // help=[目标]
//     CodeCompareOperation compareOperation = 2;   // help=[比较符号]
//     float                value            = 3;   // help=[比较值]
//     CodeValueType        valueType        = 4;   // help=[值类型，Ratio则value填[0,1]的小数]
// }

// message ConditionCheckInPassive {   // help=[检查当前是否在被动状态]
//     bool inPassive = 2;             // help=[是Passive状态则返回成功]
// }

// message ConditionCheckVar {                            // help=[检查指定变量值]
//     string               varname                = 1;   // help=[外部变量名]
//     CodeCompareOperation compareOperation       = 2;   // help=[比较符号]
//     string               expression             = 3;   // help=[比较值]
//     bool                 isGlobal               = 4;   // help=[是否为全局变量，全局变量可以在相同行为树逻辑的不同实例间共享值]
//     bool                 isCountDownVar         = 5;   // help=[是否为计时器变量]
//     bool                 isFinishedWhenVarIsNil = 6;   // help=[是否在变量未定义(为nil)时返回成功]
// }

// message ConditionPhase {                         // help=[！废弃！检查阶段]
//     CodeCompareOperation compareOperation = 1;   // help=[比较符号]
//     int32                expression       = 2;   // help=[比较值]
// }

// message ConditionAngle {                         // help=[！废弃！检查角度]
//     CodeCompareOperation compareOperation = 1;   // help=[比较符号]
//     float                angleVal         = 2;   // help=[角度值（度数有效范围0-90）]
//     float                offsetX          = 3;   // help=[目标位置偏移值, 受到目标自身朝向影响]
//     float                offsetY          = 4;   // help=[目标位置偏移值]
// }

// message ConditionActionInCD {   // help=[检查技能是否在CD]
//     string actionName = 1;      // help=[动作名]
// }

// message ConditionCheckSelfFace {   // help=[检测自己的当前朝向]
//     int32 faceSign = 1;            // help=[填1为朝右，填-1为朝左，填其他值（包括0）节点直接返回false]
// }

// message ConditionCheckSp {                       // help=[检查当前SP值]
//     CodeCompareOperation compareOperation = 2;   // help=[比较符号]
//     float                value            = 3;   // help=[比较值]
//     CodeValueType        valueType        = 4;   // help=[值类型，Ratio则value填[0,1]的小数]
// }

// message ConditionCheckWsp {                      // help=[检查当前WSP值]
//     CodeCompareOperation compareOperation = 2;   // help=[比较符号]
//     float                value            = 3;   // help=[比较值]
//     CodeValueType        valueType        = 4;   // help=[值类型，Ratio则value填[0,1]的小数]
// }

// message ConditionIsSlideUpAllowed {   //help=[检测是否可以上划]
// }
// message ActionSuicide {      // help=[自杀]
//     string deadAction = 1;   // help=[自杀动画用于覆盖死亡动画]
// }