-- [[ Log扩展 ]]
local function logMessage(level, tag, message, context)
    local stack = nil
    if __UNITY_EDITOR then
        stack = CS.TOW.LogUtility.GetCallStack(debug.traceback)
    else
        -- ** todo 真机调试的log
        -- stack = table.join(table.slice(debug.traceback():split("\n"), 4), "\n")
    end
    
    message = string.format("%s\n%s", message, stack)
    CS.TOW.LogUtility.LogImpl(level, tag, message, context)
end

function print(tag, message, context)
    logMessage(CS.TOW.LogLevel.Debug, tostring(tag), tostring(message), context)
end

function info(tag, message, context)
    logMessage(CS.TOW.LogLevel.Info, tostring(tag), tostring(message), context)
end

function warning(tag, message, context)
    logMessage(CS.TOW.LogLevel.Warning, tostring(tag), tostring(message), context)
end

local _error = error

function error(tag, message, context)
    logMessage(CS.TOW.LogLevel.Error, tostring(tag), tostring(message), context)
    -- ** pcall xpcall需要捕获这个error来正常执行lua逻辑
    _error(string.format("tag:%s\nmessage:%s\n", tag, message))
end

function assert(condition, message, context)
    if not condition then
        error("Assert", message, context)
    end
    return condition
end
