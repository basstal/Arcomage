// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FCode.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from FCode.proto</summary>
public static partial class FCodeReflection {

  #region Descriptor
  /// <summary>File descriptor for FCode.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FCodeReflection() {
    byte[] descriptorData = {
      0x0A, 0x0B, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x2E, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x22, 0xD3, 0x04, 0x0A, 0x0B, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x12, 0x0A, 0x0A, 
      0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0F, 0x0A, 0x07, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11, 0x0A, 0x09, 0x61, 0x63, 
      0x74, 0x6F, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 0x10, 0x0A, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 
      0x12, 0x0A, 0x0A, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0A, 0x0A, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x56, 0x61, 
      0x6C, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x12, 0x0E, 0x0A, 0x06, 0x64, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x12, 0x13, 0x0A, 0x0B, 0x70, 0x72, 0x6F, 0x62, 0x61, 
      0x62, 0x69, 0x6C, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x12, 0x13, 0x0A, 0x0B, 0x63, 0x6F, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6E, 0x74, 0x18, 0x0A, 0x20, 0x01, 0x28, 
      0x02, 0x12, 0x11, 0x0A, 0x09, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x4E, 0x61, 0x6D, 0x65, 0x18, 0x0B, 0x20, 0x01, 0x28, 0x09, 0x12, 0x16, 0x0A, 0x0E, 0x64, 0x6F, 0x64, 0x67, 0x65, 0x42, 0x65, 0x67, 
      0x69, 0x6E, 0x4E, 0x6F, 0x72, 0x6D, 0x18, 0x0D, 0x20, 0x01, 0x28, 0x02, 0x12, 0x14, 0x0A, 0x0C, 0x64, 0x6F, 0x64, 0x67, 0x65, 0x45, 0x6E, 0x64, 0x4E, 0x6F, 0x72, 0x6D, 0x18, 0x0E, 0x20, 0x01, 
      0x28, 0x02, 0x12, 0x0E, 0x0A, 0x06, 0x62, 0x75, 0x66, 0x66, 0x49, 0x64, 0x18, 0x0F, 0x20, 0x01, 0x28, 0x05, 0x12, 0x18, 0x0A, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x42, 0x75, 
      0x6C, 0x6C, 0x65, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x12, 0x14, 0x0A, 0x0C, 0x73, 0x70, 0x65, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x58, 0x18, 0x10, 0x20, 0x01, 
      0x28, 0x02, 0x12, 0x14, 0x0A, 0x0C, 0x73, 0x70, 0x65, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x59, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x12, 0x0D, 0x0A, 0x05, 0x76, 0x61, 0x6C, 0x75, 
      0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x12, 0x17, 0x0A, 0x0F, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 
      0x12, 0x15, 0x0A, 0x0D, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x54, 0x69, 0x6D, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x12, 0x11, 0x0A, 0x09, 0x61, 0x74, 0x74, 0x72, 0x54, 
      0x79, 0x70, 0x65, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0E, 0x0A, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x12, 0x10, 0x0A, 0x08, 0x64, 0x69, 
      0x63, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11, 0x0A, 0x09, 0x64, 0x69, 0x63, 0x74, 0x49, 0x6E, 0x64, 0x65, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x12, 
      0x10, 0x0A, 0x08, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6C, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x12, 0x15, 0x0A, 0x0D, 0x6D, 0x70, 0x52, 0x65, 0x63, 0x6F, 0x76, 0x65, 0x72, 0x52, 0x61, 
      0x74, 0x65, 0x18, 0x1A, 0x20, 0x01, 0x28, 0x02, 0x12, 0x11, 0x0A, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6F, 0x6C, 0x64, 0x18, 0x1B, 0x20, 0x01, 0x28, 0x02, 0x12, 0x11, 0x0A, 0x09, 0x74, 
      0x69, 0x6D, 0x65, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x18, 0x1C, 0x20, 0x01, 0x28, 0x02, 0x12, 0x12, 0x0A, 0x0A, 0x74, 0x69, 0x6D, 0x65, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x31, 0x18, 0x1D, 0x20, 0x01, 
      0x28, 0x02, 0x12, 0x10, 0x0A, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x18, 0x1E, 0x20, 0x01, 0x28, 0x02, 0x12, 0x0D, 0x0A, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x18, 0x1F, 0x20, 
      0x01, 0x28, 0x02, 0x2A, 0x93, 0x02, 0x0A, 0x0D, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0A, 0x12, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 
      0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x4E, 0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0A, 0x14, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x54, 
      0x69, 0x6D, 0x69, 0x6E, 0x67, 0x10, 0x01, 0x12, 0x14, 0x0A, 0x10, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x49, 0x66, 0x10, 0x02, 0x12, 0x1C, 0x0A, 
      0x18, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x10, 0x03, 0x12, 0x1A, 0x0A, 0x16, 0x46, 
      0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x46, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x10, 0x04, 0x12, 0x1B, 0x0A, 0x17, 0x46, 0x43, 0x6F, 0x64, 0x65, 
      0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x43, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x10, 0x05, 0x12, 0x19, 0x0A, 0x15, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 
      0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x43, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x10, 0x06, 0x12, 0x15, 0x0A, 0x11, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 
      0x5F, 0x45, 0x6E, 0x64, 0x10, 0x07, 0x12, 0x19, 0x0A, 0x15, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x46, 0x6F, 0x72, 0x65, 0x61, 0x63, 0x68, 0x10, 
      0x08, 0x12, 0x16, 0x0A, 0x12, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x56, 0x61, 0x72, 0x73, 0x10, 0x09, 0x2A, 0x99, 0x05, 0x0A, 0x0B, 0x46, 0x43, 
      0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x12, 0x14, 0x0A, 0x10, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x4E, 0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 
      0x1B, 0x0A, 0x17, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x43, 0x61, 0x75, 0x73, 0x65, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0A, 0x13, 
      0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x44, 0x72, 0x6F, 0x70, 0x45, 0x6E, 0x64, 0x10, 0x02, 0x12, 0x15, 0x0A, 0x11, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 
      0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x44, 0x6F, 0x64, 0x67, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0A, 0x14, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x55, 0x73, 0x65, 0x53, 
      0x6B, 0x69, 0x6C, 0x6C, 0x10, 0x04, 0x12, 0x17, 0x0A, 0x13, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x41, 0x64, 0x64, 0x42, 0x75, 0x66, 0x66, 0x10, 0x05, 0x12, 
      0x1A, 0x0A, 0x16, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x10, 0x06, 0x12, 0x1E, 0x0A, 0x1A, 0x46, 
      0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x43, 0x61, 0x75, 0x73, 0x65, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x45, 0x6E, 0x64, 0x10, 0x07, 0x12, 0x1F, 0x0A, 0x1B, 0x46, 
      0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x10, 0x08, 0x12, 0x1C, 0x0A, 0x18, 
      0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x53, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x10, 0x09, 0x12, 0x1A, 0x0A, 0x16, 0x46, 0x43, 
      0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x52, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x42, 0x75, 0x66, 0x66, 0x10, 0x0A, 0x12, 0x1F, 0x0A, 0x1B, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 
      0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x53, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x45, 0x6E, 0x64, 0x10, 0x0B, 0x12, 0x1E, 0x0A, 0x1A, 0x46, 0x43, 0x6F, 0x64, 0x65, 
      0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6B, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x45, 0x6E, 0x64, 0x10, 0x0C, 0x12, 0x23, 0x0A, 0x1F, 0x46, 0x43, 0x6F, 0x64, 0x65, 
      0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65, 0x45, 0x76, 0x6E, 0x65, 0x74, 0x46, 0x69, 0x6E, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x0E, 0x12, 0x1B, 0x0A, 0x17, 
      0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x41, 0x66, 0x66, 0x69, 0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x10, 0x0F, 0x12, 0x1D, 0x0A, 0x19, 0x46, 0x43, 0x6F, 
      0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x64, 0x10, 0x10, 0x12, 0x1C, 0x0A, 0x18, 0x46, 0x43, 0x6F, 0x64, 
      0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6C, 0x65, 0x64, 0x10, 0x11, 0x12, 0x18, 0x0A, 0x14, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 
      0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x48, 0x70, 0x10, 0x12, 0x12, 0x1B, 0x0A, 0x17, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 
      0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x61, 0x64, 0x10, 0x13, 0x12, 0x19, 0x0A, 0x15, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x41, 0x63, 0x74, 
      0x69, 0x6F, 0x6E, 0x45, 0x6E, 0x64, 0x10, 0x14, 0x12, 0x1B, 0x0A, 0x17, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x6C, 
      0x6C, 0x65, 0x74, 0x10, 0x15, 0x12, 0x14, 0x0A, 0x10, 0x46, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x4B, 0x69, 0x6C, 0x6C, 0x10, 0x16, 0x12, 0x18, 0x0A, 0x14, 0x46, 
      0x43, 0x6F, 0x64, 0x65, 0x54, 0x69, 0x6D, 0x69, 0x6E, 0x67, 0x5F, 0x43, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x53, 0x70, 0x10, 0x17, 0x62, 0x06, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x33, };
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::FCodeNodeType), typeof(global::FCodeTiming), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::FCodeConfig), global::FCodeConfig.Parser, new[]{ "Id", "LogicId", "ActorType", "AttrType", "CompareOpt", "CompareVal", "Damage", "Probability", "Coefficient", "FieldName", "DodgeBeginNorm", "DodgeEndNorm", "BuffId", "ExternalBulletId", "SpeedChangeX", "SpeedChangeY", "Value", "TargetActorType", "TransformTime", "AttrType1", "Action", "DictName", "DictIndex", "Interval", "MpRecoverRate", "Threshold", "TimePoint", "TimePoint1", "Duration", "Ratio" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum FCodeNodeType {
  [pbr::OriginalName("FCodeNodeType_None")] None = 0,
  [pbr::OriginalName("FCodeNodeType_Timing")] Timing = 1,
  [pbr::OriginalName("FCodeNodeType_If")] If = 2,
  [pbr::OriginalName("FCodeNodeType_Expression")] Expression = 3,
  [pbr::OriginalName("FCodeNodeType_Function")] Function = 4,
  [pbr::OriginalName("FCodeNodeType_Condition")] Condition = 5,
  [pbr::OriginalName("FCodeNodeType_Command")] Command = 6,
  [pbr::OriginalName("FCodeNodeType_End")] End = 7,
  [pbr::OriginalName("FCodeNodeType_Foreach")] Foreach = 8,
  [pbr::OriginalName("FCodeNodeType_Vars")] Vars = 9,
}

public enum FCodeTiming {
  [pbr::OriginalName("FCodeTiming_None")] None = 0,
  [pbr::OriginalName("FCodeTiming_CauseDamage")] CauseDamage = 1,
  [pbr::OriginalName("FCodeTiming_DropEnd")] DropEnd = 2,
  [pbr::OriginalName("FCodeTiming_Dodge")] Dodge = 3,
  [pbr::OriginalName("FCodeTiming_UseSkill")] UseSkill = 4,
  [pbr::OriginalName("FCodeTiming_AddBuff")] AddBuff = 5,
  [pbr::OriginalName("FCodeTiming_UpdateBuff")] UpdateBuff = 6,
  [pbr::OriginalName("FCodeTiming_CauseDamageEnd")] CauseDamageEnd = 7,
  [pbr::OriginalName("FCodeTiming_StackChangeBuff")] StackChangeBuff = 8,
  [pbr::OriginalName("FCodeTiming_SufferDamage")] SufferDamage = 9,
  [pbr::OriginalName("FCodeTiming_RemoveBuff")] RemoveBuff = 10,
  [pbr::OriginalName("FCodeTiming_SufferDamageEnd")] SufferDamageEnd = 11,
  [pbr::OriginalName("FCodeTiming_AttackEventEnd")] AttackEventEnd = 12,
  [pbr::OriginalName("FCodeTiming_DamageEvnetFinished")] DamageEvnetFinished = 14,
  [pbr::OriginalName("FCodeTiming_AffixEffect")] AffixEffect = 15,
  [pbr::OriginalName("FCodeTiming_ActionChanged")] ActionChanged = 16,
  [pbr::OriginalName("FCodeTiming_UpdateScaled")] UpdateScaled = 17,
  [pbr::OriginalName("FCodeTiming_ChangeHp")] ChangeHp = 18,
  [pbr::OriginalName("FCodeTiming_ProcessDead")] ProcessDead = 19,
  [pbr::OriginalName("FCodeTiming_ActionEnd")] ActionEnd = 20,
  [pbr::OriginalName("FCodeTiming_StartBullet")] StartBullet = 21,
  [pbr::OriginalName("FCodeTiming_Kill")] Kill = 22,
  [pbr::OriginalName("FCodeTiming_ChangeSp")] ChangeSp = 23,
}

#endregion

#region Messages
public sealed partial class FCodeConfig : pb::IMessage<FCodeConfig> {
  private static readonly pb::MessageParser<FCodeConfig> _parser = new pb::MessageParser<FCodeConfig>(() => new FCodeConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FCodeConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FCodeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FCodeConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FCodeConfig(FCodeConfig other) : this() {
    id_ = other.id_;
    logicId_ = other.logicId_;
    actorType_ = other.actorType_;
    attrType_ = other.attrType_;
    compareOpt_ = other.compareOpt_;
    compareVal_ = other.compareVal_;
    damage_ = other.damage_;
    probability_ = other.probability_;
    coefficient_ = other.coefficient_;
    fieldName_ = other.fieldName_;
    dodgeBeginNorm_ = other.dodgeBeginNorm_;
    dodgeEndNorm_ = other.dodgeEndNorm_;
    buffId_ = other.buffId_;
    externalBulletId_ = other.externalBulletId_;
    speedChangeX_ = other.speedChangeX_;
    speedChangeY_ = other.speedChangeY_;
    value_ = other.value_;
    targetActorType_ = other.targetActorType_;
    transformTime_ = other.transformTime_;
    attrType1_ = other.attrType1_;
    action_ = other.action_;
    dictName_ = other.dictName_;
    dictIndex_ = other.dictIndex_;
    interval_ = other.interval_;
    mpRecoverRate_ = other.mpRecoverRate_;
    threshold_ = other.threshold_;
    timePoint_ = other.timePoint_;
    timePoint1_ = other.timePoint1_;
    duration_ = other.duration_;
    ratio_ = other.ratio_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FCodeConfig Clone() {
    return new FCodeConfig(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "logicId" field.</summary>
  public const int LogicIdFieldNumber = 2;
  private string logicId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LogicId {
    get { return logicId_; }
    set {
      logicId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "actorType" field.</summary>
  public const int ActorTypeFieldNumber = 4;
  private string actorType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ActorType {
    get { return actorType_; }
    set {
      actorType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "attrType" field.</summary>
  public const int AttrTypeFieldNumber = 5;
  private string attrType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AttrType {
    get { return attrType_; }
    set {
      attrType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "compareOpt" field.</summary>
  public const int CompareOptFieldNumber = 6;
  private string compareOpt_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CompareOpt {
    get { return compareOpt_; }
    set {
      compareOpt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "compareVal" field.</summary>
  public const int CompareValFieldNumber = 7;
  private float compareVal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CompareVal {
    get { return compareVal_; }
    set {
      compareVal_ = value;
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 8;
  private float damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  /// <summary>Field number for the "probability" field.</summary>
  public const int ProbabilityFieldNumber = 9;
  private float probability_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Probability {
    get { return probability_; }
    set {
      probability_ = value;
    }
  }

  /// <summary>Field number for the "coefficient" field.</summary>
  public const int CoefficientFieldNumber = 10;
  private float coefficient_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Coefficient {
    get { return coefficient_; }
    set {
      coefficient_ = value;
    }
  }

  /// <summary>Field number for the "fieldName" field.</summary>
  public const int FieldNameFieldNumber = 11;
  private string fieldName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FieldName {
    get { return fieldName_; }
    set {
      fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dodgeBeginNorm" field.</summary>
  public const int DodgeBeginNormFieldNumber = 13;
  private float dodgeBeginNorm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float DodgeBeginNorm {
    get { return dodgeBeginNorm_; }
    set {
      dodgeBeginNorm_ = value;
    }
  }

  /// <summary>Field number for the "dodgeEndNorm" field.</summary>
  public const int DodgeEndNormFieldNumber = 14;
  private float dodgeEndNorm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float DodgeEndNorm {
    get { return dodgeEndNorm_; }
    set {
      dodgeEndNorm_ = value;
    }
  }

  /// <summary>Field number for the "buffId" field.</summary>
  public const int BuffIdFieldNumber = 15;
  private int buffId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffId {
    get { return buffId_; }
    set {
      buffId_ = value;
    }
  }

  /// <summary>Field number for the "externalBulletId" field.</summary>
  public const int ExternalBulletIdFieldNumber = 32;
  private int externalBulletId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ExternalBulletId {
    get { return externalBulletId_; }
    set {
      externalBulletId_ = value;
    }
  }

  /// <summary>Field number for the "speedChangeX" field.</summary>
  public const int SpeedChangeXFieldNumber = 16;
  private float speedChangeX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SpeedChangeX {
    get { return speedChangeX_; }
    set {
      speedChangeX_ = value;
    }
  }

  /// <summary>Field number for the "speedChangeY" field.</summary>
  public const int SpeedChangeYFieldNumber = 17;
  private float speedChangeY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SpeedChangeY {
    get { return speedChangeY_; }
    set {
      speedChangeY_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 18;
  private float value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "targetActorType" field.</summary>
  public const int TargetActorTypeFieldNumber = 19;
  private string targetActorType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetActorType {
    get { return targetActorType_; }
    set {
      targetActorType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "transformTime" field.</summary>
  public const int TransformTimeFieldNumber = 20;
  private float transformTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TransformTime {
    get { return transformTime_; }
    set {
      transformTime_ = value;
    }
  }

  /// <summary>Field number for the "attrType1" field.</summary>
  public const int AttrType1FieldNumber = 21;
  private string attrType1_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AttrType1 {
    get { return attrType1_; }
    set {
      attrType1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 22;
  private string action_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Action {
    get { return action_; }
    set {
      action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dictName" field.</summary>
  public const int DictNameFieldNumber = 23;
  private string dictName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DictName {
    get { return dictName_; }
    set {
      dictName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dictIndex" field.</summary>
  public const int DictIndexFieldNumber = 24;
  private string dictIndex_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DictIndex {
    get { return dictIndex_; }
    set {
      dictIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "interval" field.</summary>
  public const int IntervalFieldNumber = 25;
  private float interval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Interval {
    get { return interval_; }
    set {
      interval_ = value;
    }
  }

  /// <summary>Field number for the "mpRecoverRate" field.</summary>
  public const int MpRecoverRateFieldNumber = 26;
  private float mpRecoverRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float MpRecoverRate {
    get { return mpRecoverRate_; }
    set {
      mpRecoverRate_ = value;
    }
  }

  /// <summary>Field number for the "threshold" field.</summary>
  public const int ThresholdFieldNumber = 27;
  private float threshold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Threshold {
    get { return threshold_; }
    set {
      threshold_ = value;
    }
  }

  /// <summary>Field number for the "timePoint" field.</summary>
  public const int TimePointFieldNumber = 28;
  private float timePoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TimePoint {
    get { return timePoint_; }
    set {
      timePoint_ = value;
    }
  }

  /// <summary>Field number for the "timePoint1" field.</summary>
  public const int TimePoint1FieldNumber = 29;
  private float timePoint1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TimePoint1 {
    get { return timePoint1_; }
    set {
      timePoint1_ = value;
    }
  }

  /// <summary>Field number for the "duration" field.</summary>
  public const int DurationFieldNumber = 30;
  private float duration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  /// <summary>Field number for the "ratio" field.</summary>
  public const int RatioFieldNumber = 31;
  private float ratio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Ratio {
    get { return ratio_; }
    set {
      ratio_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FCodeConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FCodeConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (LogicId != other.LogicId) return false;
    if (ActorType != other.ActorType) return false;
    if (AttrType != other.AttrType) return false;
    if (CompareOpt != other.CompareOpt) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CompareVal, other.CompareVal)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Damage, other.Damage)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Probability, other.Probability)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Coefficient, other.Coefficient)) return false;
    if (FieldName != other.FieldName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeBeginNorm, other.DodgeBeginNorm)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeEndNorm, other.DodgeEndNorm)) return false;
    if (BuffId != other.BuffId) return false;
    if (ExternalBulletId != other.ExternalBulletId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedChangeX, other.SpeedChangeX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedChangeY, other.SpeedChangeY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
    if (TargetActorType != other.TargetActorType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TransformTime, other.TransformTime)) return false;
    if (AttrType1 != other.AttrType1) return false;
    if (Action != other.Action) return false;
    if (DictName != other.DictName) return false;
    if (DictIndex != other.DictIndex) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Interval, other.Interval)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MpRecoverRate, other.MpRecoverRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimePoint, other.TimePoint)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimePoint1, other.TimePoint1)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ratio, other.Ratio)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (LogicId.Length != 0) hash ^= LogicId.GetHashCode();
    if (ActorType.Length != 0) hash ^= ActorType.GetHashCode();
    if (AttrType.Length != 0) hash ^= AttrType.GetHashCode();
    if (CompareOpt.Length != 0) hash ^= CompareOpt.GetHashCode();
    if (CompareVal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CompareVal);
    if (Damage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Damage);
    if (Probability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Probability);
    if (Coefficient != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Coefficient);
    if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
    if (DodgeBeginNorm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeBeginNorm);
    if (DodgeEndNorm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeEndNorm);
    if (BuffId != 0) hash ^= BuffId.GetHashCode();
    if (ExternalBulletId != 0) hash ^= ExternalBulletId.GetHashCode();
    if (SpeedChangeX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedChangeX);
    if (SpeedChangeY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedChangeY);
    if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
    if (TargetActorType.Length != 0) hash ^= TargetActorType.GetHashCode();
    if (TransformTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TransformTime);
    if (AttrType1.Length != 0) hash ^= AttrType1.GetHashCode();
    if (Action.Length != 0) hash ^= Action.GetHashCode();
    if (DictName.Length != 0) hash ^= DictName.GetHashCode();
    if (DictIndex.Length != 0) hash ^= DictIndex.GetHashCode();
    if (Interval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Interval);
    if (MpRecoverRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MpRecoverRate);
    if (Threshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Threshold);
    if (TimePoint != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimePoint);
    if (TimePoint1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimePoint1);
    if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
    if (Ratio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ratio);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (LogicId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(LogicId);
    }
    if (ActorType.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ActorType);
    }
    if (AttrType.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(AttrType);
    }
    if (CompareOpt.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(CompareOpt);
    }
    if (CompareVal != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(CompareVal);
    }
    if (Damage != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(Damage);
    }
    if (Probability != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(Probability);
    }
    if (Coefficient != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(Coefficient);
    }
    if (FieldName.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(FieldName);
    }
    if (DodgeBeginNorm != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(DodgeBeginNorm);
    }
    if (DodgeEndNorm != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(DodgeEndNorm);
    }
    if (BuffId != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(BuffId);
    }
    if (SpeedChangeX != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(SpeedChangeX);
    }
    if (SpeedChangeY != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(SpeedChangeY);
    }
    if (Value != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(Value);
    }
    if (TargetActorType.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteString(TargetActorType);
    }
    if (TransformTime != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(TransformTime);
    }
    if (AttrType1.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(AttrType1);
    }
    if (Action.Length != 0) {
      output.WriteRawTag(178, 1);
      output.WriteString(Action);
    }
    if (DictName.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(DictName);
    }
    if (DictIndex.Length != 0) {
      output.WriteRawTag(194, 1);
      output.WriteString(DictIndex);
    }
    if (Interval != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(Interval);
    }
    if (MpRecoverRate != 0F) {
      output.WriteRawTag(213, 1);
      output.WriteFloat(MpRecoverRate);
    }
    if (Threshold != 0F) {
      output.WriteRawTag(221, 1);
      output.WriteFloat(Threshold);
    }
    if (TimePoint != 0F) {
      output.WriteRawTag(229, 1);
      output.WriteFloat(TimePoint);
    }
    if (TimePoint1 != 0F) {
      output.WriteRawTag(237, 1);
      output.WriteFloat(TimePoint1);
    }
    if (Duration != 0F) {
      output.WriteRawTag(245, 1);
      output.WriteFloat(Duration);
    }
    if (Ratio != 0F) {
      output.WriteRawTag(253, 1);
      output.WriteFloat(Ratio);
    }
    if (ExternalBulletId != 0) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(ExternalBulletId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (LogicId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LogicId);
    }
    if (ActorType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorType);
    }
    if (AttrType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AttrType);
    }
    if (CompareOpt.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CompareOpt);
    }
    if (CompareVal != 0F) {
      size += 1 + 4;
    }
    if (Damage != 0F) {
      size += 1 + 4;
    }
    if (Probability != 0F) {
      size += 1 + 4;
    }
    if (Coefficient != 0F) {
      size += 1 + 4;
    }
    if (FieldName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
    }
    if (DodgeBeginNorm != 0F) {
      size += 1 + 4;
    }
    if (DodgeEndNorm != 0F) {
      size += 1 + 4;
    }
    if (BuffId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
    }
    if (ExternalBulletId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExternalBulletId);
    }
    if (SpeedChangeX != 0F) {
      size += 2 + 4;
    }
    if (SpeedChangeY != 0F) {
      size += 2 + 4;
    }
    if (Value != 0F) {
      size += 2 + 4;
    }
    if (TargetActorType.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(TargetActorType);
    }
    if (TransformTime != 0F) {
      size += 2 + 4;
    }
    if (AttrType1.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AttrType1);
    }
    if (Action.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Action);
    }
    if (DictName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DictName);
    }
    if (DictIndex.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DictIndex);
    }
    if (Interval != 0F) {
      size += 2 + 4;
    }
    if (MpRecoverRate != 0F) {
      size += 2 + 4;
    }
    if (Threshold != 0F) {
      size += 2 + 4;
    }
    if (TimePoint != 0F) {
      size += 2 + 4;
    }
    if (TimePoint1 != 0F) {
      size += 2 + 4;
    }
    if (Duration != 0F) {
      size += 2 + 4;
    }
    if (Ratio != 0F) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FCodeConfig other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.LogicId.Length != 0) {
      LogicId = other.LogicId;
    }
    if (other.ActorType.Length != 0) {
      ActorType = other.ActorType;
    }
    if (other.AttrType.Length != 0) {
      AttrType = other.AttrType;
    }
    if (other.CompareOpt.Length != 0) {
      CompareOpt = other.CompareOpt;
    }
    if (other.CompareVal != 0F) {
      CompareVal = other.CompareVal;
    }
    if (other.Damage != 0F) {
      Damage = other.Damage;
    }
    if (other.Probability != 0F) {
      Probability = other.Probability;
    }
    if (other.Coefficient != 0F) {
      Coefficient = other.Coefficient;
    }
    if (other.FieldName.Length != 0) {
      FieldName = other.FieldName;
    }
    if (other.DodgeBeginNorm != 0F) {
      DodgeBeginNorm = other.DodgeBeginNorm;
    }
    if (other.DodgeEndNorm != 0F) {
      DodgeEndNorm = other.DodgeEndNorm;
    }
    if (other.BuffId != 0) {
      BuffId = other.BuffId;
    }
    if (other.ExternalBulletId != 0) {
      ExternalBulletId = other.ExternalBulletId;
    }
    if (other.SpeedChangeX != 0F) {
      SpeedChangeX = other.SpeedChangeX;
    }
    if (other.SpeedChangeY != 0F) {
      SpeedChangeY = other.SpeedChangeY;
    }
    if (other.Value != 0F) {
      Value = other.Value;
    }
    if (other.TargetActorType.Length != 0) {
      TargetActorType = other.TargetActorType;
    }
    if (other.TransformTime != 0F) {
      TransformTime = other.TransformTime;
    }
    if (other.AttrType1.Length != 0) {
      AttrType1 = other.AttrType1;
    }
    if (other.Action.Length != 0) {
      Action = other.Action;
    }
    if (other.DictName.Length != 0) {
      DictName = other.DictName;
    }
    if (other.DictIndex.Length != 0) {
      DictIndex = other.DictIndex;
    }
    if (other.Interval != 0F) {
      Interval = other.Interval;
    }
    if (other.MpRecoverRate != 0F) {
      MpRecoverRate = other.MpRecoverRate;
    }
    if (other.Threshold != 0F) {
      Threshold = other.Threshold;
    }
    if (other.TimePoint != 0F) {
      TimePoint = other.TimePoint;
    }
    if (other.TimePoint1 != 0F) {
      TimePoint1 = other.TimePoint1;
    }
    if (other.Duration != 0F) {
      Duration = other.Duration;
    }
    if (other.Ratio != 0F) {
      Ratio = other.Ratio;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          LogicId = input.ReadString();
          break;
        }
        case 34: {
          ActorType = input.ReadString();
          break;
        }
        case 42: {
          AttrType = input.ReadString();
          break;
        }
        case 50: {
          CompareOpt = input.ReadString();
          break;
        }
        case 61: {
          CompareVal = input.ReadFloat();
          break;
        }
        case 69: {
          Damage = input.ReadFloat();
          break;
        }
        case 77: {
          Probability = input.ReadFloat();
          break;
        }
        case 85: {
          Coefficient = input.ReadFloat();
          break;
        }
        case 90: {
          FieldName = input.ReadString();
          break;
        }
        case 109: {
          DodgeBeginNorm = input.ReadFloat();
          break;
        }
        case 117: {
          DodgeEndNorm = input.ReadFloat();
          break;
        }
        case 120: {
          BuffId = input.ReadInt32();
          break;
        }
        case 133: {
          SpeedChangeX = input.ReadFloat();
          break;
        }
        case 141: {
          SpeedChangeY = input.ReadFloat();
          break;
        }
        case 149: {
          Value = input.ReadFloat();
          break;
        }
        case 154: {
          TargetActorType = input.ReadString();
          break;
        }
        case 165: {
          TransformTime = input.ReadFloat();
          break;
        }
        case 170: {
          AttrType1 = input.ReadString();
          break;
        }
        case 178: {
          Action = input.ReadString();
          break;
        }
        case 186: {
          DictName = input.ReadString();
          break;
        }
        case 194: {
          DictIndex = input.ReadString();
          break;
        }
        case 205: {
          Interval = input.ReadFloat();
          break;
        }
        case 213: {
          MpRecoverRate = input.ReadFloat();
          break;
        }
        case 221: {
          Threshold = input.ReadFloat();
          break;
        }
        case 229: {
          TimePoint = input.ReadFloat();
          break;
        }
        case 237: {
          TimePoint1 = input.ReadFloat();
          break;
        }
        case 245: {
          Duration = input.ReadFloat();
          break;
        }
        case 253: {
          Ratio = input.ReadFloat();
          break;
        }
        case 256: {
          ExternalBulletId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
