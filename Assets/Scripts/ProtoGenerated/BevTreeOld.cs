// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BevTreeOld.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from BevTreeOld.proto</summary>
public static partial class BevTreeOldReflection {

  #region Descriptor
  /// <summary>File descriptor for BevTreeOld.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BevTreeOldReflection() {
    byte[] descriptorData = {
      0x0A, 0x10, 0x42, 0x65, 0x76, 0x54, 0x72, 0x65, 0x65, 0x4F, 0x6C, 0x64, 0x2E, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x22, 0x0D, 0x0A, 0x0B, 0x42, 0x65, 0x76, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6F, 0x6F, 
      0x74, 0x22, 0x2D, 0x0A, 0x09, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0A, 0x09, 0x61, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 
      0x0E, 0x32, 0x0D, 0x2E, 0x42, 0x65, 0x76, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x22, 0x2F, 0x0A, 0x08, 0x44, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0A, 0x0C, 
      0x64, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0E, 0x32, 0x0D, 0x2E, 0x44, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 
      0x65, 0x22, 0x21, 0x0A, 0x0E, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x12, 0x0F, 0x0A, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 
      0x20, 0x03, 0x28, 0x09, 0x22, 0x95, 0x02, 0x0A, 0x08, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x12, 0x0C, 0x0A, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 
      0x0C, 0x0A, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1E, 0x0A, 0x08, 0x6E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0E, 0x32, 
      0x0C, 0x2E, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1F, 0x0A, 0x07, 0x62, 0x65, 0x76, 0x54, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0B, 0x32, 0x0C, 
      0x2E, 0x42, 0x65, 0x76, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6F, 0x6F, 0x74, 0x48, 0x00, 0x12, 0x1E, 0x0A, 0x08, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x18, 0x0A, 0x20, 0x01, 0x28, 0x0B, 
      0x32, 0x0A, 0x2E, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x65, 0x48, 0x00, 0x12, 0x1E, 0x0A, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6E, 0x63, 0x65, 0x18, 0x0B, 0x20, 0x01, 0x28, 0x0B, 
      0x32, 0x0A, 0x2E, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x65, 0x48, 0x00, 0x12, 0x29, 0x0A, 0x0E, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x6F, 0x72, 
      0x18, 0x0C, 0x20, 0x01, 0x28, 0x0B, 0x32, 0x0F, 0x2E, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x48, 0x00, 0x12, 0x1B, 0x0A, 0x08, 0x63, 0x68, 0x69, 
      0x6C, 0x64, 0x72, 0x65, 0x6E, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0B, 0x32, 0x09, 0x2E, 0x43, 0x6F, 0x64, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x12, 0x1C, 0x0A, 0x09, 0x64, 0x65, 0x63, 0x6F, 0x72, 0x61, 
      0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0B, 0x32, 0x09, 0x2E, 0x44, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0A, 0x04, 0x70, 0x72, 0x6F, 0x70, 0x2A, 0x73, 0x0A, 0x0C, 
      0x42, 0x65, 0x76, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x12, 0x15, 0x0A, 0x11, 0x42, 0x65, 0x76, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x5F, 0x4E, 0x6F, 0x6E, 
      0x65, 0x10, 0x00, 0x12, 0x15, 0x0A, 0x11, 0x42, 0x65, 0x76, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x5F, 0x53, 0x65, 0x6C, 0x66, 0x10, 0x01, 0x12, 0x1E, 0x0A, 0x1A, 0x42, 0x65, 
      0x76, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x5F, 0x4C, 0x6F, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6F, 0x72, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x15, 0x0A, 0x11, 0x42, 0x65, 
      0x76, 0x41, 0x62, 0x6F, 0x72, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x5F, 0x42, 0x6F, 0x74, 0x68, 0x10, 0x03, 0x2A, 0x91, 0x01, 0x0A, 0x0B, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 
      0x65, 0x12, 0x14, 0x0A, 0x10, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x4E, 0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0A, 0x15, 0x42, 0x65, 0x76, 0x4E, 0x6F, 
      0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0A, 0x12, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 
      0x65, 0x5F, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x10, 0x02, 0x12, 0x19, 0x0A, 0x15, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x43, 0x6F, 0x6E, 0x64, 0x69, 0x74, 
      0x69, 0x6F, 0x6E, 0x10, 0x03, 0x12, 0x1E, 0x0A, 0x1A, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x53, 0x65, 0x6C, 0x65, 0x63, 
      0x74, 0x6F, 0x72, 0x10, 0x04, 0x2A, 0x3B, 0x0A, 0x0C, 0x44, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0A, 0x11, 0x44, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 
      0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x4E, 0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0A, 0x10, 0x44, 0x65, 0x63, 0x6F, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x4E, 0x6F, 0x74, 
      0x10, 0x01, 0x2A, 0xE6, 0x07, 0x0A, 0x08, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x12, 0x14, 0x0A, 0x10, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x43, 0x6D, 0x64, 0x4E, 
      0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0A, 0x0C, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x54, 0x61, 0x70, 0x10, 0x01, 0x12, 0x11, 0x0A, 0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 
      0x43, 0x6D, 0x64, 0x5F, 0x54, 0x61, 0x70, 0x32, 0x10, 0x0C, 0x12, 0x11, 0x0A, 0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x54, 0x61, 0x70, 0x33, 0x10, 0x0D, 0x12, 0x11, 0x0A, 
      0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x54, 0x61, 0x70, 0x34, 0x10, 0x0E, 0x12, 0x17, 0x0A, 0x13, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x52, 0x65, 0x76, 
      0x65, 0x72, 0x73, 0x65, 0x54, 0x61, 0x70, 0x10, 0x11, 0x12, 0x18, 0x0A, 0x14, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x61, 0x70, 
      0x32, 0x10, 0x12, 0x12, 0x18, 0x0A, 0x14, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x61, 0x70, 0x33, 0x10, 0x13, 0x12, 0x18, 0x0A, 
      0x14, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x61, 0x70, 0x34, 0x10, 0x14, 0x12, 0x12, 0x0A, 0x0E, 0x49, 0x6E, 0x70, 0x75, 0x74, 
      0x43, 0x6D, 0x64, 0x5F, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x10, 0x15, 0x12, 0x13, 0x0A, 0x0F, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x32, 0x10, 0x16, 
      0x12, 0x13, 0x0A, 0x0F, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x33, 0x10, 0x17, 0x12, 0x13, 0x0A, 0x0F, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 
      0x64, 0x5F, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x34, 0x10, 0x18, 0x12, 0x11, 0x0A, 0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x4D, 0x6F, 0x76, 0x65, 0x10, 0x0F, 0x12, 0x11, 0x0A, 
      0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x52, 0x75, 0x73, 0x68, 0x10, 0x10, 0x12, 0x19, 0x0A, 0x15, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x6C, 0x69, 
      0x64, 0x65, 0x46, 0x6F, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0A, 0x10, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x6C, 0x69, 0x64, 0x65, 0x55, 0x70, 0x10, 
      0x03, 0x12, 0x16, 0x0A, 0x12, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x6C, 0x69, 0x64, 0x65, 0x44, 0x6F, 0x77, 0x6E, 0x10, 0x04, 0x12, 0x14, 0x0A, 0x10, 0x49, 0x6E, 0x70, 
      0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x55, 0x69, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x10, 0x05, 0x12, 0x13, 0x0A, 0x0F, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x55, 0x69, 0x44, 0x6F, 
      0x77, 0x6E, 0x10, 0x06, 0x12, 0x11, 0x0A, 0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x55, 0x69, 0x55, 0x70, 0x10, 0x07, 0x12, 0x16, 0x0A, 0x12, 0x49, 0x6E, 0x70, 0x75, 0x74, 
      0x43, 0x6D, 0x64, 0x5F, 0x53, 0x6C, 0x69, 0x64, 0x65, 0x42, 0x61, 0x63, 0x6B, 0x10, 0x08, 0x12, 0x12, 0x0A, 0x0E, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x6C, 0x69, 0x64, 
      0x65, 0x10, 0x09, 0x12, 0x1A, 0x0A, 0x16, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x55, 0x6C, 0x74, 0x69, 0x6D, 0x61, 0x74, 0x65, 0x53, 0x6B, 0x69, 0x6C, 0x6C, 0x10, 0x0B, 0x12, 
      0x18, 0x0A, 0x14, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x44, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0x55, 0x69, 0x54, 0x61, 0x70, 0x10, 0x37, 0x12, 0x15, 0x0A, 0x11, 0x49, 0x6E, 0x70, 
      0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x4D, 0x75, 0x6C, 0x74, 0x69, 0x54, 0x61, 0x70, 0x10, 0x38, 0x12, 0x16, 0x0A, 0x12, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x48, 0x6F, 0x6C, 
      0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x65, 0x12, 0x14, 0x0A, 0x10, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x48, 0x6F, 0x6C, 0x64, 0x45, 0x6E, 0x64, 0x10, 0x66, 0x12, 0x1C, 
      0x0A, 0x17, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x10, 0xC8, 0x01, 0x12, 0x22, 0x0A, 0x1D, 
      0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x6C, 0x69, 0x64, 0x65, 0x46, 0x6F, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0xCA, 0x01, 
      0x12, 0x1D, 0x0A, 0x18, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x6C, 0x69, 0x64, 0x65, 0x55, 0x70, 0x10, 0xCB, 0x01, 0x12, 
      0x1F, 0x0A, 0x1A, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x72, 0x61, 0x69, 0x74, 0x53, 0x6C, 0x69, 0x64, 0x65, 0x44, 0x6F, 0x77, 0x6E, 0x10, 0xCC, 0x01, 
      0x12, 0x18, 0x0A, 0x13, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x4D, 0x75, 0x6C, 0x74, 0x69, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x10, 0x90, 0x03, 0x12, 0x19, 0x0A, 0x14, 0x49, 0x6E, 
      0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6F, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0xF6, 0x03, 0x12, 0x1A, 0x0A, 0x15, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 
      0x64, 0x5F, 0x53, 0x70, 0x65, 0x63, 0x42, 0x61, 0x63, 0x6B, 0x77, 0x61, 0x72, 0x64, 0x10, 0xFC, 0x03, 0x12, 0x16, 0x0A, 0x11, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x70, 
      0x65, 0x63, 0x44, 0x6F, 0x77, 0x6E, 0x10, 0xFA, 0x03, 0x12, 0x14, 0x0A, 0x0F, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x53, 0x70, 0x65, 0x63, 0x55, 0x70, 0x10, 0xFB, 0x03, 0x12, 
      0x14, 0x0A, 0x0F, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x57, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x10, 0xD8, 0x04, 0x12, 0x12, 0x0A, 0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 
      0x64, 0x5F, 0x4A, 0x75, 0x6D, 0x70, 0x10, 0xA0, 0x06, 0x12, 0x12, 0x0A, 0x0D, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x46, 0x61, 0x6C, 0x6C, 0x10, 0xA1, 0x06, 0x12, 0x15, 0x0A, 
      0x10, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 0x5F, 0x44, 0x69, 0x72, 0x48, 0x6F, 0x6C, 0x64, 0x10, 0xA2, 0x06, 0x12, 0x15, 0x0A, 0x10, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x43, 0x6D, 0x64, 
      0x5F, 0x43, 0x6D, 0x64, 0x41, 0x75, 0x74, 0x6F, 0x10, 0xE8, 0x07, 0x2A, 0xD7, 0x02, 0x0A, 0x0A, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0A, 0x0F, 0x41, 0x63, 
      0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x4E, 0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0A, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x41, 0x74, 
      0x74, 0x61, 0x63, 0x6B, 0x10, 0x01, 0x12, 0x16, 0x0A, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x62, 0x79, 0x10, 0x02, 0x12, 0x13, 
      0x0A, 0x0F, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x57, 0x61, 0x6C, 0x6B, 0x10, 0x03, 0x12, 0x12, 0x0A, 0x0E, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 
      0x65, 0x5F, 0x52, 0x75, 0x6E, 0x10, 0x04, 0x12, 0x16, 0x0A, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x4E, 0x6F, 0x4C, 0x65, 0x61, 0x72, 0x6E, 0x10, 0x05, 0x12, 
      0x17, 0x0A, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x55, 0x6C, 0x74, 0x69, 0x6D, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x16, 0x0A, 0x12, 0x41, 0x63, 0x74, 0x69, 
      0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x07, 0x12, 0x13, 0x0A, 0x0F, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x44, 
      0x65, 0x61, 0x64, 0x10, 0x08, 0x12, 0x13, 0x0A, 0x0F, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x44, 0x72, 0x6F, 0x70, 0x10, 0x09, 0x12, 0x16, 0x0A, 0x12, 0x41, 0x63, 
      0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x57, 0x69, 0x6E, 0x50, 0x6F, 0x73, 0x65, 0x10, 0x0A, 0x12, 0x13, 0x0A, 0x0F, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 
      0x5F, 0x50, 0x6F, 0x73, 0x65, 0x10, 0x0B, 0x12, 0x1D, 0x0A, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 
      0x6E, 0x64, 0x62, 0x79, 0x10, 0x0C, 0x12, 0x1D, 0x0A, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x50, 0x61, 0x73, 0x73, 
      0x69, 0x76, 0x65, 0x10, 0x0D, 0x2A, 0x38, 0x0A, 0x0A, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x13, 0x0A, 0x0F, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 
      0x74, 0x5F, 0x53, 0x65, 0x6C, 0x66, 0x10, 0x00, 0x12, 0x15, 0x0A, 0x11, 0x43, 0x6F, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5F, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x01, 0x2A, 
      0xF7, 0x01, 0x0A, 0x14, 0x43, 0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x12, 0x1E, 0x0A, 0x1A, 0x43, 0x6F, 0x64, 0x65, 
      0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x45, 0x71, 0x75, 0x61, 0x6C, 0x10, 0x00, 0x12, 0x21, 0x0A, 0x1D, 0x43, 0x6F, 0x64, 0x65, 
      0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x4E, 0x6F, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6C, 0x10, 0x01, 0x12, 0x23, 0x0A, 0x1F, 0x43, 
      0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x42, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6E, 0x10, 0x02, 
      0x12, 0x21, 0x0A, 0x1D, 0x43, 0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x4C, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 
      0x6E, 0x10, 0x03, 0x12, 0x2A, 0x0A, 0x26, 0x43, 0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x42, 0x69, 0x67, 0x67, 
      0x65, 0x72, 0x54, 0x68, 0x61, 0x6E, 0x4F, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6C, 0x10, 0x04, 0x12, 0x28, 0x0A, 0x24, 0x43, 0x6F, 0x64, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x4F, 0x70, 
      0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x4C, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6E, 0x4F, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6C, 0x10, 0x05, 0x2A, 0x82, 0x01, 0x0A, 0x16, 0x43, 0x6F, 
      0x64, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x46, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x12, 0x1F, 0x0A, 0x1B, 0x43, 0x6F, 0x64, 0x65, 0x44, 0x69, 0x73, 0x74, 
      0x61, 0x6E, 0x63, 0x65, 0x46, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x5F, 0x4E, 0x6F, 0x6E, 0x65, 0x10, 0x00, 0x12, 0x21, 0x0A, 0x1D, 0x43, 0x6F, 0x64, 0x65, 0x44, 0x69, 0x73, 
      0x74, 0x61, 0x6E, 0x63, 0x65, 0x46, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x5F, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x10, 0x01, 0x12, 0x24, 0x0A, 0x20, 0x43, 0x6F, 0x64, 0x65, 
      0x44, 0x69, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x46, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x5F, 0x4E, 0x6F, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x10, 0x02, 0x2A, 0x98, 
      0x01, 0x0A, 0x0E, 0x43, 0x6F, 0x64, 0x65, 0x46, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x12, 0x19, 0x0A, 0x15, 0x43, 0x6F, 0x64, 0x65, 0x46, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 
      0x69, 0x6F, 0x6E, 0x5F, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x10, 0x00, 0x12, 0x1C, 0x0A, 0x18, 0x43, 0x6F, 0x64, 0x65, 0x46, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x4E, 
      0x6F, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x10, 0x01, 0x12, 0x17, 0x0A, 0x13, 0x43, 0x6F, 0x64, 0x65, 0x46, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x4C, 0x65, 0x66, 
      0x74, 0x10, 0x02, 0x12, 0x18, 0x0A, 0x14, 0x43, 0x6F, 0x64, 0x65, 0x46, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x03, 0x12, 0x1A, 0x0A, 
      0x16, 0x43, 0x6F, 0x64, 0x65, 0x46, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x10, 0x04, 0x2A, 0x70, 0x0A, 0x11, 0x43, 0x6F, 0x64, 
      0x65, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1C, 0x0A, 0x18, 0x43, 0x6F, 0x64, 0x65, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 
      0x79, 0x70, 0x65, 0x5F, 0x53, 0x74, 0x72, 0x6F, 0x6E, 0x67, 0x10, 0x00, 0x12, 0x21, 0x0A, 0x1D, 0x43, 0x6F, 0x64, 0x65, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x79, 0x70, 
      0x65, 0x5F, 0x50, 0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6D, 0x65, 0x10, 0x01, 0x12, 0x1A, 0x0A, 0x16, 0x43, 0x6F, 0x64, 0x65, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 
      0x54, 0x79, 0x70, 0x65, 0x5F, 0x57, 0x65, 0x61, 0x6B, 0x10, 0x02, 0x2A, 0x5F, 0x0A, 0x0D, 0x43, 0x6F, 0x64, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0A, 0x13, 
      0x43, 0x6F, 0x64, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0A, 0x13, 0x43, 0x6F, 0x64, 0x65, 0x56, 0x61, 0x6C, 
      0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x52, 0x61, 0x74, 0x69, 0x6F, 0x10, 0x01, 0x12, 0x1C, 0x0A, 0x18, 0x43, 0x6F, 0x64, 0x65, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 
      0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x33, };
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::BevAbortMode), typeof(global::BevNodeType), typeof(global::DecorateType), typeof(global::InputCmd), typeof(global::ActionType), typeof(global::CodeTarget), typeof(global::CodeCompareOperation), typeof(global::CodeDistanceFaceSymbol), typeof(global::CodeFaceAction), typeof(global::CodeSetActionType), typeof(global::CodeValueType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BevTreeRoot), global::BevTreeRoot.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Composite), global::Composite.Parser, new[]{ "AbortMode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Decorate), global::Decorate.Parser, new[]{ "DecorateType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RandomSelector), global::RandomSelector.Parser, new[]{ "Weights" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CodeNode), global::CodeNode.Parser, new[]{ "Name", "Type", "NodeType", "BevTree", "Selector", "Sequence", "RandomSelector", "Children", "Decorates" }, new[]{ "Prop" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum BevAbortMode {
  [pbr::OriginalName("BevAbortMode_None")] None = 0,
  [pbr::OriginalName("BevAbortMode_Self")] Self = 1,
  [pbr::OriginalName("BevAbortMode_LowerPriority")] LowerPriority = 2,
  [pbr::OriginalName("BevAbortMode_Both")] Both = 3,
}

public enum BevNodeType {
  [pbr::OriginalName("BevNodeType_None")] None = 0,
  [pbr::OriginalName("BevNodeType_Composite")] Composite = 1,
  [pbr::OriginalName("BevNodeType_Action")] Action = 2,
  [pbr::OriginalName("BevNodeType_Condition")] Condition = 3,
  [pbr::OriginalName("BevNodeType_RandomSelector")] RandomSelector = 4,
}

public enum DecorateType {
  [pbr::OriginalName("DecorateType_None")] None = 0,
  [pbr::OriginalName("DecorateType_Not")] Not = 1,
}

public enum InputCmd {
  [pbr::OriginalName("InputCmd_CmdNone")] CmdNone = 0,
  [pbr::OriginalName("InputCmd_Tap")] Tap = 1,
  [pbr::OriginalName("InputCmd_Tap2")] Tap2 = 12,
  [pbr::OriginalName("InputCmd_Tap3")] Tap3 = 13,
  [pbr::OriginalName("InputCmd_Tap4")] Tap4 = 14,
  [pbr::OriginalName("InputCmd_ReverseTap")] ReverseTap = 17,
  [pbr::OriginalName("InputCmd_ReverseTap2")] ReverseTap2 = 18,
  [pbr::OriginalName("InputCmd_ReverseTap3")] ReverseTap3 = 19,
  [pbr::OriginalName("InputCmd_ReverseTap4")] ReverseTap4 = 20,
  [pbr::OriginalName("InputCmd_Click")] Click = 21,
  [pbr::OriginalName("InputCmd_Click2")] Click2 = 22,
  [pbr::OriginalName("InputCmd_Click3")] Click3 = 23,
  [pbr::OriginalName("InputCmd_Click4")] Click4 = 24,
  [pbr::OriginalName("InputCmd_Move")] Move = 15,
  [pbr::OriginalName("InputCmd_Rush")] Rush = 16,
  [pbr::OriginalName("InputCmd_SlideForward")] SlideForward = 2,
  [pbr::OriginalName("InputCmd_SlideUp")] SlideUp = 3,
  [pbr::OriginalName("InputCmd_SlideDown")] SlideDown = 4,
  [pbr::OriginalName("InputCmd_UiClick")] UiClick = 5,
  [pbr::OriginalName("InputCmd_UiDown")] UiDown = 6,
  [pbr::OriginalName("InputCmd_UiUp")] UiUp = 7,
  [pbr::OriginalName("InputCmd_SlideBack")] SlideBack = 8,
  [pbr::OriginalName("InputCmd_Slide")] Slide = 9,
  [pbr::OriginalName("InputCmd_UltimateSkill")] UltimateSkill = 11,
  [pbr::OriginalName("InputCmd_DoubleUiTap")] DoubleUiTap = 55,
  [pbr::OriginalName("InputCmd_MultiTap")] MultiTap = 56,
  [pbr::OriginalName("InputCmd_HoldStart")] HoldStart = 101,
  [pbr::OriginalName("InputCmd_HoldEnd")] HoldEnd = 102,
  [pbr::OriginalName("InputCmd_ProtraitButton")] ProtraitButton = 200,
  [pbr::OriginalName("InputCmd_ProtraitSlideForward")] ProtraitSlideForward = 202,
  [pbr::OriginalName("InputCmd_ProtraitSlideUp")] ProtraitSlideUp = 203,
  [pbr::OriginalName("InputCmd_ProtraitSlideDown")] ProtraitSlideDown = 204,
  [pbr::OriginalName("InputCmd_MultiClick")] MultiClick = 400,
  [pbr::OriginalName("InputCmd_SpecForward")] SpecForward = 502,
  [pbr::OriginalName("InputCmd_SpecBackward")] SpecBackward = 508,
  [pbr::OriginalName("InputCmd_SpecDown")] SpecDown = 506,
  [pbr::OriginalName("InputCmd_SpecUp")] SpecUp = 507,
  [pbr::OriginalName("InputCmd_Weapon")] Weapon = 600,
  [pbr::OriginalName("InputCmd_Jump")] Jump = 800,
  [pbr::OriginalName("InputCmd_Fall")] Fall = 801,
  [pbr::OriginalName("InputCmd_DirHold")] DirHold = 802,
  [pbr::OriginalName("InputCmd_CmdAuto")] CmdAuto = 1000,
}

public enum ActionType {
  [pbr::OriginalName("ActionType_None")] None = 0,
  [pbr::OriginalName("ActionType_Attack")] Attack = 1,
  [pbr::OriginalName("ActionType_Standby")] Standby = 2,
  [pbr::OriginalName("ActionType_Walk")] Walk = 3,
  [pbr::OriginalName("ActionType_Run")] Run = 4,
  [pbr::OriginalName("ActionType_NoLearn")] NoLearn = 5,
  [pbr::OriginalName("ActionType_Ultimate")] Ultimate = 6,
  [pbr::OriginalName("ActionType_Passive")] Passive = 7,
  [pbr::OriginalName("ActionType_Dead")] Dead = 8,
  [pbr::OriginalName("ActionType_Drop")] Drop = 9,
  [pbr::OriginalName("ActionType_WinPose")] WinPose = 10,
  [pbr::OriginalName("ActionType_Pose")] Pose = 11,
  [pbr::OriginalName("ActionType_ProtectStandby")] ProtectStandby = 12,
  [pbr::OriginalName("ActionType_ProtectPassive")] ProtectPassive = 13,
}

public enum CodeTarget {
  [pbr::OriginalName("CodeTarget_Self")] Self = 0,
  [pbr::OriginalName("CodeTarget_Target")] Target = 1,
}

public enum CodeCompareOperation {
  [pbr::OriginalName("CodeCompareOperation_Equal")] Equal = 0,
  [pbr::OriginalName("CodeCompareOperation_NotEqual")] NotEqual = 1,
  [pbr::OriginalName("CodeCompareOperation_BiggerThan")] BiggerThan = 2,
  [pbr::OriginalName("CodeCompareOperation_LessThan")] LessThan = 3,
  [pbr::OriginalName("CodeCompareOperation_BiggerThanOrEqual")] BiggerThanOrEqual = 4,
  [pbr::OriginalName("CodeCompareOperation_LessThanOrEqual")] LessThanOrEqual = 5,
}

public enum CodeDistanceFaceSymbol {
  [pbr::OriginalName("CodeDistanceFaceSymbol_None")] None = 0,
  [pbr::OriginalName("CodeDistanceFaceSymbol_Facing")] Facing = 1,
  [pbr::OriginalName("CodeDistanceFaceSymbol_NotFacing")] NotFacing = 2,
}

public enum CodeFaceAction {
  [pbr::OriginalName("CodeFaceAction_Facing")] Facing = 0,
  [pbr::OriginalName("CodeFaceAction_NotFacing")] NotFacing = 1,
  [pbr::OriginalName("CodeFaceAction_Left")] Left = 2,
  [pbr::OriginalName("CodeFaceAction_Right")] Right = 3,
  [pbr::OriginalName("CodeFaceAction_Reverse")] Reverse = 4,
}

public enum CodeSetActionType {
  [pbr::OriginalName("CodeSetActionType_Strong")] Strong = 0,
  [pbr::OriginalName("CodeSetActionType_ProtectTime")] ProtectTime = 1,
  [pbr::OriginalName("CodeSetActionType_Weak")] Weak = 2,
}

public enum CodeValueType {
  [pbr::OriginalName("CodeValueType_Value")] Value = 0,
  [pbr::OriginalName("CodeValueType_Ratio")] Ratio = 1,
  [pbr::OriginalName("CodeValueType_Expression")] Expression = 2,
}

#endregion

#region Messages
public sealed partial class BevTreeRoot : pb::IMessage<BevTreeRoot> {
  private static readonly pb::MessageParser<BevTreeRoot> _parser = new pb::MessageParser<BevTreeRoot>(() => new BevTreeRoot());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BevTreeRoot> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeOldReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevTreeRoot() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevTreeRoot(BevTreeRoot other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevTreeRoot Clone() {
    return new BevTreeRoot(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BevTreeRoot);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BevTreeRoot other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BevTreeRoot other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Composite : pb::IMessage<Composite> {
  private static readonly pb::MessageParser<Composite> _parser = new pb::MessageParser<Composite>(() => new Composite());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Composite> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeOldReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Composite() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Composite(Composite other) : this() {
    abortMode_ = other.abortMode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Composite Clone() {
    return new Composite(this);
  }

  /// <summary>Field number for the "abortMode" field.</summary>
  public const int AbortModeFieldNumber = 1;
  private global::BevAbortMode abortMode_ = global::BevAbortMode.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BevAbortMode AbortMode {
    get { return abortMode_; }
    set {
      abortMode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Composite);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Composite other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AbortMode != other.AbortMode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AbortMode != global::BevAbortMode.None) hash ^= AbortMode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AbortMode != global::BevAbortMode.None) {
      output.WriteRawTag(8);
      output.WriteEnum((int) AbortMode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AbortMode != global::BevAbortMode.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AbortMode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Composite other) {
    if (other == null) {
      return;
    }
    if (other.AbortMode != global::BevAbortMode.None) {
      AbortMode = other.AbortMode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AbortMode = (global::BevAbortMode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class Decorate : pb::IMessage<Decorate> {
  private static readonly pb::MessageParser<Decorate> _parser = new pb::MessageParser<Decorate>(() => new Decorate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Decorate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeOldReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Decorate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Decorate(Decorate other) : this() {
    decorateType_ = other.decorateType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Decorate Clone() {
    return new Decorate(this);
  }

  /// <summary>Field number for the "decorateType" field.</summary>
  public const int DecorateTypeFieldNumber = 1;
  private global::DecorateType decorateType_ = global::DecorateType.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DecorateType DecorateType {
    get { return decorateType_; }
    set {
      decorateType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Decorate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Decorate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DecorateType != other.DecorateType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DecorateType != global::DecorateType.None) hash ^= DecorateType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DecorateType != global::DecorateType.None) {
      output.WriteRawTag(8);
      output.WriteEnum((int) DecorateType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DecorateType != global::DecorateType.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DecorateType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Decorate other) {
    if (other == null) {
      return;
    }
    if (other.DecorateType != global::DecorateType.None) {
      DecorateType = other.DecorateType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DecorateType = (global::DecorateType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class RandomSelector : pb::IMessage<RandomSelector> {
  private static readonly pb::MessageParser<RandomSelector> _parser = new pb::MessageParser<RandomSelector>(() => new RandomSelector());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RandomSelector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeOldReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RandomSelector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RandomSelector(RandomSelector other) : this() {
    weights_ = other.weights_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RandomSelector Clone() {
    return new RandomSelector(this);
  }

  /// <summary>Field number for the "weights" field.</summary>
  public const int WeightsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_weights_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> weights_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Weights {
    get { return weights_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RandomSelector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RandomSelector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!weights_.Equals(other.weights_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= weights_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    weights_.WriteTo(output, _repeated_weights_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += weights_.CalculateSize(_repeated_weights_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RandomSelector other) {
    if (other == null) {
      return;
    }
    weights_.Add(other.weights_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          weights_.AddEntriesFrom(input, _repeated_weights_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CodeNode : pb::IMessage<CodeNode> {
  private static readonly pb::MessageParser<CodeNode> _parser = new pb::MessageParser<CodeNode>(() => new CodeNode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CodeNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeOldReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CodeNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CodeNode(CodeNode other) : this() {
    name_ = other.name_;
    type_ = other.type_;
    nodeType_ = other.nodeType_;
    children_ = other.children_.Clone();
    decorates_ = other.decorates_.Clone();
    switch (other.PropCase) {
      case PropOneofCase.BevTree:
        BevTree = other.BevTree.Clone();
        break;
      case PropOneofCase.Selector:
        Selector = other.Selector.Clone();
        break;
      case PropOneofCase.Sequence:
        Sequence = other.Sequence.Clone();
        break;
      case PropOneofCase.RandomSelector:
        RandomSelector = other.RandomSelector.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CodeNode Clone() {
    return new CodeNode(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nodeType" field.</summary>
  public const int NodeTypeFieldNumber = 4;
  private global::BevNodeType nodeType_ = global::BevNodeType.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BevNodeType NodeType {
    get { return nodeType_; }
    set {
      nodeType_ = value;
    }
  }

  /// <summary>Field number for the "bevTree" field.</summary>
  public const int BevTreeFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BevTreeRoot BevTree {
    get { return propCase_ == PropOneofCase.BevTree ? (global::BevTreeRoot) prop_ : null; }
    set {
      prop_ = value;
      propCase_ = value == null ? PropOneofCase.None : PropOneofCase.BevTree;
    }
  }

  /// <summary>Field number for the "selector" field.</summary>
  public const int SelectorFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Composite Selector {
    get { return propCase_ == PropOneofCase.Selector ? (global::Composite) prop_ : null; }
    set {
      prop_ = value;
      propCase_ = value == null ? PropOneofCase.None : PropOneofCase.Selector;
    }
  }

  /// <summary>Field number for the "sequence" field.</summary>
  public const int SequenceFieldNumber = 11;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Composite Sequence {
    get { return propCase_ == PropOneofCase.Sequence ? (global::Composite) prop_ : null; }
    set {
      prop_ = value;
      propCase_ = value == null ? PropOneofCase.None : PropOneofCase.Sequence;
    }
  }

  /// <summary>Field number for the "randomSelector" field.</summary>
  public const int RandomSelectorFieldNumber = 12;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RandomSelector RandomSelector {
    get { return propCase_ == PropOneofCase.RandomSelector ? (global::RandomSelector) prop_ : null; }
    set {
      prop_ = value;
      propCase_ = value == null ? PropOneofCase.None : PropOneofCase.RandomSelector;
    }
  }

  /// <summary>Field number for the "children" field.</summary>
  public const int ChildrenFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CodeNode> _repeated_children_codec
      = pb::FieldCodec.ForMessage(26, global::CodeNode.Parser);
  private readonly pbc::RepeatedField<global::CodeNode> children_ = new pbc::RepeatedField<global::CodeNode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CodeNode> Children {
    get { return children_; }
  }

  /// <summary>Field number for the "decorates" field.</summary>
  public const int DecoratesFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Decorate> _repeated_decorates_codec
      = pb::FieldCodec.ForMessage(42, global::Decorate.Parser);
  private readonly pbc::RepeatedField<global::Decorate> decorates_ = new pbc::RepeatedField<global::Decorate>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Decorate> Decorates {
    get { return decorates_; }
  }

  private object prop_;
  /// <summary>Enum of possible cases for the "prop" oneof.</summary>
  public enum PropOneofCase {
    None = 0,
    BevTree = 9,
    Selector = 10,
    Sequence = 11,
    RandomSelector = 12,
  }
  private PropOneofCase propCase_ = PropOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PropOneofCase PropCase {
    get { return propCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProp() {
    propCase_ = PropOneofCase.None;
    prop_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CodeNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CodeNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Type != other.Type) return false;
    if (NodeType != other.NodeType) return false;
    if (!object.Equals(BevTree, other.BevTree)) return false;
    if (!object.Equals(Selector, other.Selector)) return false;
    if (!object.Equals(Sequence, other.Sequence)) return false;
    if (!object.Equals(RandomSelector, other.RandomSelector)) return false;
    if(!children_.Equals(other.children_)) return false;
    if(!decorates_.Equals(other.decorates_)) return false;
    if (PropCase != other.PropCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (NodeType != global::BevNodeType.None) hash ^= NodeType.GetHashCode();
    if (propCase_ == PropOneofCase.BevTree) hash ^= BevTree.GetHashCode();
    if (propCase_ == PropOneofCase.Selector) hash ^= Selector.GetHashCode();
    if (propCase_ == PropOneofCase.Sequence) hash ^= Sequence.GetHashCode();
    if (propCase_ == PropOneofCase.RandomSelector) hash ^= RandomSelector.GetHashCode();
    hash ^= children_.GetHashCode();
    hash ^= decorates_.GetHashCode();
    hash ^= (int) propCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    children_.WriteTo(output, _repeated_children_codec);
    if (NodeType != global::BevNodeType.None) {
      output.WriteRawTag(32);
      output.WriteEnum((int) NodeType);
    }
    decorates_.WriteTo(output, _repeated_decorates_codec);
    if (propCase_ == PropOneofCase.BevTree) {
      output.WriteRawTag(74);
      output.WriteMessage(BevTree);
    }
    if (propCase_ == PropOneofCase.Selector) {
      output.WriteRawTag(82);
      output.WriteMessage(Selector);
    }
    if (propCase_ == PropOneofCase.Sequence) {
      output.WriteRawTag(90);
      output.WriteMessage(Sequence);
    }
    if (propCase_ == PropOneofCase.RandomSelector) {
      output.WriteRawTag(98);
      output.WriteMessage(RandomSelector);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (NodeType != global::BevNodeType.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NodeType);
    }
    if (propCase_ == PropOneofCase.BevTree) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BevTree);
    }
    if (propCase_ == PropOneofCase.Selector) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selector);
    }
    if (propCase_ == PropOneofCase.Sequence) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sequence);
    }
    if (propCase_ == PropOneofCase.RandomSelector) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomSelector);
    }
    size += children_.CalculateSize(_repeated_children_codec);
    size += decorates_.CalculateSize(_repeated_decorates_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CodeNode other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    if (other.NodeType != global::BevNodeType.None) {
      NodeType = other.NodeType;
    }
    children_.Add(other.children_);
    decorates_.Add(other.decorates_);
    switch (other.PropCase) {
      case PropOneofCase.BevTree:
        if (BevTree == null) {
          BevTree = new global::BevTreeRoot();
        }
        BevTree.MergeFrom(other.BevTree);
        break;
      case PropOneofCase.Selector:
        if (Selector == null) {
          Selector = new global::Composite();
        }
        Selector.MergeFrom(other.Selector);
        break;
      case PropOneofCase.Sequence:
        if (Sequence == null) {
          Sequence = new global::Composite();
        }
        Sequence.MergeFrom(other.Sequence);
        break;
      case PropOneofCase.RandomSelector:
        if (RandomSelector == null) {
          RandomSelector = new global::RandomSelector();
        }
        RandomSelector.MergeFrom(other.RandomSelector);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
        case 26: {
          children_.AddEntriesFrom(input, _repeated_children_codec);
          break;
        }
        case 32: {
          NodeType = (global::BevNodeType) input.ReadEnum();
          break;
        }
        case 42: {
          decorates_.AddEntriesFrom(input, _repeated_decorates_codec);
          break;
        }
        case 74: {
          global::BevTreeRoot subBuilder = new global::BevTreeRoot();
          if (propCase_ == PropOneofCase.BevTree) {
            subBuilder.MergeFrom(BevTree);
          }
          input.ReadMessage(subBuilder);
          BevTree = subBuilder;
          break;
        }
        case 82: {
          global::Composite subBuilder = new global::Composite();
          if (propCase_ == PropOneofCase.Selector) {
            subBuilder.MergeFrom(Selector);
          }
          input.ReadMessage(subBuilder);
          Selector = subBuilder;
          break;
        }
        case 90: {
          global::Composite subBuilder = new global::Composite();
          if (propCase_ == PropOneofCase.Sequence) {
            subBuilder.MergeFrom(Sequence);
          }
          input.ReadMessage(subBuilder);
          Sequence = subBuilder;
          break;
        }
        case 98: {
          global::RandomSelector subBuilder = new global::RandomSelector();
          if (propCase_ == PropOneofCase.RandomSelector) {
            subBuilder.MergeFrom(RandomSelector);
          }
          input.ReadMessage(subBuilder);
          RandomSelector = subBuilder;
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
