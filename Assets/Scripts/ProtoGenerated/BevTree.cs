// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BevTree.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from BevTree.proto</summary>
public static partial class BevTreeReflection {

  #region Descriptor
  /// <summary>File descriptor for BevTree.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BevTreeReflection() {
    byte[] descriptorData = {
      0x0A, 0x0D, 0x42, 0x65, 0x76, 0x54, 0x72, 0x65, 0x65, 0x2E, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x22, 0x24, 0x0A, 0x0C, 0x56, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x32, 0x50, 0x72, 0x6F, 0x74, 0x6F, 0x12, 
      0x09, 0x0A, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x12, 0x09, 0x0A, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x22, 0xC7, 0x01, 0x0A, 0x07, 0x42, 0x65, 0x76, 0x54, 0x72, 0x65, 
      0x65, 0x12, 0x0C, 0x0A, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x10, 0x0A, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 
      0x09, 0x12, 0x10, 0x0A, 0x08, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x12, 0x0A, 0x0A, 0x7A, 0x6F, 0x6F, 0x6D, 0x46, 0x61, 0x63, 0x74, 0x6F, 
      0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x12, 0x14, 0x0A, 0x0C, 0x70, 0x72, 0x69, 0x6D, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x55, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x22, 0x0A, 
      0x0B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0B, 0x32, 0x0D, 0x2E, 0x56, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x32, 0x50, 0x72, 0x6F, 0x74, 
      0x6F, 0x12, 0x17, 0x0A, 0x05, 0x6E, 0x6F, 0x64, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0B, 0x32, 0x08, 0x2E, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x12, 0x23, 0x0A, 0x0B, 0x63, 0x6F, 
      0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0B, 0x32, 0x0E, 0x2E, 0x42, 0x65, 0x76, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x22, 
      0xD2, 0x01, 0x0A, 0x07, 0x42, 0x65, 0x76, 0x4E, 0x6F, 0x64, 0x65, 0x12, 0x0B, 0x0A, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0A, 0x0A, 0x02, 0x69, 0x64, 0x18, 0x02, 
      0x20, 0x01, 0x28, 0x05, 0x12, 0x0C, 0x0A, 0x04, 0x6E, 0x61, 0x6D, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0B, 0x0A, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x12, 
      0x0F, 0x0A, 0x07, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x12, 0x0C, 0x0A, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x12, 0x18, 
      0x0A, 0x10, 0x69, 0x6E, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x55, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x12, 0x19, 0x0A, 0x11, 0x6F, 0x75, 0x74, 0x43, 
      0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x55, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x12, 0x1F, 0x0A, 0x08, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x18, 
      0x09, 0x20, 0x01, 0x28, 0x0B, 0x32, 0x0D, 0x2E, 0x56, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x32, 0x50, 0x72, 0x6F, 0x74, 0x6F, 0x12, 0x0C, 0x0A, 0x04, 0x74, 0x61, 0x73, 0x6B, 0x18, 0x0A, 0x20, 0x01, 
      0x28, 0x0C, 0x12, 0x10, 0x0A, 0x08, 0x74, 0x61, 0x73, 0x6B, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0B, 0x20, 0x01, 0x28, 0x09, 0x22, 0x5C, 0x0A, 0x0D, 0x42, 0x65, 0x76, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 
      0x63, 0x74, 0x69, 0x6F, 0x6E, 0x12, 0x0B, 0x0A, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0A, 0x0D, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x4E, 0x6F, 0x64, 0x65, 
      0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x15, 0x0A, 0x0D, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4E, 0x6F, 0x64, 0x65, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 
      0x12, 0x10, 0x0A, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x62, 0x06, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x33, };
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector2Proto), global::Vector2Proto.Parser, new[]{ "X", "Y" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BevTree), global::BevTree.Parser, new[]{ "Name", "Category", "Comments", "ZoomFactor", "PrimeNodeUid", "Translation", "Nodes", "Connections" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BevNode), global::BevNode.Parser, new[]{ "Uid", "Id", "Name", "Tag", "Comment", "Type", "InConnectionsUid", "OutConnectionsUid", "Position", "Task", "TaskType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BevConnection), global::BevConnection.Parser, new[]{ "Uid", "SourceNodeUid", "TargetNodeUid", "IsActive" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Vector2Proto : pb::IMessage<Vector2Proto> {
  private static readonly pb::MessageParser<Vector2Proto> _parser = new pb::MessageParser<Vector2Proto>(() => new Vector2Proto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector2Proto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector2Proto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector2Proto(Vector2Proto other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector2Proto Clone() {
    return new Vector2Proto(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector2Proto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector2Proto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector2Proto other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class BevTree : pb::IMessage<BevTree> {
  private static readonly pb::MessageParser<BevTree> _parser = new pb::MessageParser<BevTree>(() => new BevTree());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BevTree> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevTree() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevTree(BevTree other) : this() {
    name_ = other.name_;
    category_ = other.category_;
    comments_ = other.comments_;
    zoomFactor_ = other.zoomFactor_;
    primeNodeUid_ = other.primeNodeUid_;
    translation_ = other.translation_ != null ? other.translation_.Clone() : null;
    nodes_ = other.nodes_.Clone();
    connections_ = other.connections_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevTree Clone() {
    return new BevTree(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 2;
  private string category_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Category {
    get { return category_; }
    set {
      category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "comments" field.</summary>
  public const int CommentsFieldNumber = 3;
  private string comments_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Comments {
    get { return comments_; }
    set {
      comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "zoomFactor" field.</summary>
  public const int ZoomFactorFieldNumber = 4;
  private float zoomFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ZoomFactor {
    get { return zoomFactor_; }
    set {
      zoomFactor_ = value;
    }
  }

  /// <summary>Field number for the "primeNodeUid" field.</summary>
  public const int PrimeNodeUidFieldNumber = 5;
  private string primeNodeUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PrimeNodeUid {
    get { return primeNodeUid_; }
    set {
      primeNodeUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "translation" field.</summary>
  public const int TranslationFieldNumber = 21;
  private global::Vector2Proto translation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector2Proto Translation {
    get { return translation_; }
    set {
      translation_ = value;
    }
  }

  /// <summary>Field number for the "nodes" field.</summary>
  public const int NodesFieldNumber = 22;
  private static readonly pb::FieldCodec<global::BevNode> _repeated_nodes_codec
      = pb::FieldCodec.ForMessage(178, global::BevNode.Parser);
  private readonly pbc::RepeatedField<global::BevNode> nodes_ = new pbc::RepeatedField<global::BevNode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BevNode> Nodes {
    get { return nodes_; }
  }

  /// <summary>Field number for the "connections" field.</summary>
  public const int ConnectionsFieldNumber = 23;
  private static readonly pb::FieldCodec<global::BevConnection> _repeated_connections_codec
      = pb::FieldCodec.ForMessage(186, global::BevConnection.Parser);
  private readonly pbc::RepeatedField<global::BevConnection> connections_ = new pbc::RepeatedField<global::BevConnection>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BevConnection> Connections {
    get { return connections_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BevTree);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BevTree other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Category != other.Category) return false;
    if (Comments != other.Comments) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZoomFactor, other.ZoomFactor)) return false;
    if (PrimeNodeUid != other.PrimeNodeUid) return false;
    if (!object.Equals(Translation, other.Translation)) return false;
    if(!nodes_.Equals(other.nodes_)) return false;
    if(!connections_.Equals(other.connections_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Category.Length != 0) hash ^= Category.GetHashCode();
    if (Comments.Length != 0) hash ^= Comments.GetHashCode();
    if (ZoomFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZoomFactor);
    if (PrimeNodeUid.Length != 0) hash ^= PrimeNodeUid.GetHashCode();
    if (translation_ != null) hash ^= Translation.GetHashCode();
    hash ^= nodes_.GetHashCode();
    hash ^= connections_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Category.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Category);
    }
    if (Comments.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Comments);
    }
    if (ZoomFactor != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(ZoomFactor);
    }
    if (PrimeNodeUid.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(PrimeNodeUid);
    }
    if (translation_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(Translation);
    }
    nodes_.WriteTo(output, _repeated_nodes_codec);
    connections_.WriteTo(output, _repeated_connections_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Category.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
    }
    if (Comments.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
    }
    if (ZoomFactor != 0F) {
      size += 1 + 4;
    }
    if (PrimeNodeUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimeNodeUid);
    }
    if (translation_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Translation);
    }
    size += nodes_.CalculateSize(_repeated_nodes_codec);
    size += connections_.CalculateSize(_repeated_connections_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BevTree other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Category.Length != 0) {
      Category = other.Category;
    }
    if (other.Comments.Length != 0) {
      Comments = other.Comments;
    }
    if (other.ZoomFactor != 0F) {
      ZoomFactor = other.ZoomFactor;
    }
    if (other.PrimeNodeUid.Length != 0) {
      PrimeNodeUid = other.PrimeNodeUid;
    }
    if (other.translation_ != null) {
      if (translation_ == null) {
        Translation = new global::Vector2Proto();
      }
      Translation.MergeFrom(other.Translation);
    }
    nodes_.Add(other.nodes_);
    connections_.Add(other.connections_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Category = input.ReadString();
          break;
        }
        case 26: {
          Comments = input.ReadString();
          break;
        }
        case 37: {
          ZoomFactor = input.ReadFloat();
          break;
        }
        case 42: {
          PrimeNodeUid = input.ReadString();
          break;
        }
        case 170: {
          if (translation_ == null) {
            Translation = new global::Vector2Proto();
          }
          input.ReadMessage(Translation);
          break;
        }
        case 178: {
          nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
          break;
        }
        case 186: {
          connections_.AddEntriesFrom(input, _repeated_connections_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BevNode : pb::IMessage<BevNode> {
  private static readonly pb::MessageParser<BevNode> _parser = new pb::MessageParser<BevNode>(() => new BevNode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BevNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevNode(BevNode other) : this() {
    uid_ = other.uid_;
    id_ = other.id_;
    name_ = other.name_;
    tag_ = other.tag_;
    comment_ = other.comment_;
    type_ = other.type_;
    inConnectionsUid_ = other.inConnectionsUid_.Clone();
    outConnectionsUid_ = other.outConnectionsUid_.Clone();
    position_ = other.position_ != null ? other.position_.Clone() : null;
    task_ = other.task_;
    taskType_ = other.taskType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevNode Clone() {
    return new BevNode(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tag" field.</summary>
  public const int TagFieldNumber = 4;
  private string tag_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Tag {
    get { return tag_; }
    set {
      tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 5;
  private string comment_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Comment {
    get { return comment_; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 6;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "inConnectionsUid" field.</summary>
  public const int InConnectionsUidFieldNumber = 7;
  private static readonly pb::FieldCodec<string> _repeated_inConnectionsUid_codec
      = pb::FieldCodec.ForString(58);
  private readonly pbc::RepeatedField<string> inConnectionsUid_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> InConnectionsUid {
    get { return inConnectionsUid_; }
  }

  /// <summary>Field number for the "outConnectionsUid" field.</summary>
  public const int OutConnectionsUidFieldNumber = 8;
  private static readonly pb::FieldCodec<string> _repeated_outConnectionsUid_codec
      = pb::FieldCodec.ForString(66);
  private readonly pbc::RepeatedField<string> outConnectionsUid_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> OutConnectionsUid {
    get { return outConnectionsUid_; }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 9;
  private global::Vector2Proto position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector2Proto Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 10;
  private pb::ByteString task_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Task {
    get { return task_; }
    set {
      task_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "taskType" field.</summary>
  public const int TaskTypeFieldNumber = 11;
  private string taskType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TaskType {
    get { return taskType_; }
    set {
      taskType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BevNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BevNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Tag != other.Tag) return false;
    if (Comment != other.Comment) return false;
    if (Type != other.Type) return false;
    if(!inConnectionsUid_.Equals(other.inConnectionsUid_)) return false;
    if(!outConnectionsUid_.Equals(other.outConnectionsUid_)) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (Task != other.Task) return false;
    if (TaskType != other.TaskType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Tag.Length != 0) hash ^= Tag.GetHashCode();
    if (Comment.Length != 0) hash ^= Comment.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    hash ^= inConnectionsUid_.GetHashCode();
    hash ^= outConnectionsUid_.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (Task.Length != 0) hash ^= Task.GetHashCode();
    if (TaskType.Length != 0) hash ^= TaskType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Tag.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Tag);
    }
    if (Comment.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Comment);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Type);
    }
    inConnectionsUid_.WriteTo(output, _repeated_inConnectionsUid_codec);
    outConnectionsUid_.WriteTo(output, _repeated_outConnectionsUid_codec);
    if (position_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Position);
    }
    if (Task.Length != 0) {
      output.WriteRawTag(82);
      output.WriteBytes(Task);
    }
    if (TaskType.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(TaskType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Tag.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
    }
    if (Comment.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    size += inConnectionsUid_.CalculateSize(_repeated_inConnectionsUid_codec);
    size += outConnectionsUid_.CalculateSize(_repeated_outConnectionsUid_codec);
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (Task.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Task);
    }
    if (TaskType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BevNode other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Tag.Length != 0) {
      Tag = other.Tag;
    }
    if (other.Comment.Length != 0) {
      Comment = other.Comment;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    inConnectionsUid_.Add(other.inConnectionsUid_);
    outConnectionsUid_.Add(other.outConnectionsUid_);
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector2Proto();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.Task.Length != 0) {
      Task = other.Task;
    }
    if (other.TaskType.Length != 0) {
      TaskType = other.TaskType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Tag = input.ReadString();
          break;
        }
        case 42: {
          Comment = input.ReadString();
          break;
        }
        case 50: {
          Type = input.ReadString();
          break;
        }
        case 58: {
          inConnectionsUid_.AddEntriesFrom(input, _repeated_inConnectionsUid_codec);
          break;
        }
        case 66: {
          outConnectionsUid_.AddEntriesFrom(input, _repeated_outConnectionsUid_codec);
          break;
        }
        case 74: {
          if (position_ == null) {
            Position = new global::Vector2Proto();
          }
          input.ReadMessage(Position);
          break;
        }
        case 82: {
          Task = input.ReadBytes();
          break;
        }
        case 90: {
          TaskType = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class BevConnection : pb::IMessage<BevConnection> {
  private static readonly pb::MessageParser<BevConnection> _parser = new pb::MessageParser<BevConnection>(() => new BevConnection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BevConnection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BevTreeReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevConnection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevConnection(BevConnection other) : this() {
    uid_ = other.uid_;
    sourceNodeUid_ = other.sourceNodeUid_;
    targetNodeUid_ = other.targetNodeUid_;
    isActive_ = other.isActive_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BevConnection Clone() {
    return new BevConnection(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sourceNodeUid" field.</summary>
  public const int SourceNodeUidFieldNumber = 2;
  private string sourceNodeUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SourceNodeUid {
    get { return sourceNodeUid_; }
    set {
      sourceNodeUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "targetNodeUid" field.</summary>
  public const int TargetNodeUidFieldNumber = 3;
  private string targetNodeUid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetNodeUid {
    get { return targetNodeUid_; }
    set {
      targetNodeUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isActive" field.</summary>
  public const int IsActiveFieldNumber = 4;
  private bool isActive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsActive {
    get { return isActive_; }
    set {
      isActive_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BevConnection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BevConnection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (SourceNodeUid != other.SourceNodeUid) return false;
    if (TargetNodeUid != other.TargetNodeUid) return false;
    if (IsActive != other.IsActive) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (SourceNodeUid.Length != 0) hash ^= SourceNodeUid.GetHashCode();
    if (TargetNodeUid.Length != 0) hash ^= TargetNodeUid.GetHashCode();
    if (IsActive != false) hash ^= IsActive.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (SourceNodeUid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SourceNodeUid);
    }
    if (TargetNodeUid.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(TargetNodeUid);
    }
    if (IsActive != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsActive);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (SourceNodeUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceNodeUid);
    }
    if (TargetNodeUid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetNodeUid);
    }
    if (IsActive != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BevConnection other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.SourceNodeUid.Length != 0) {
      SourceNodeUid = other.SourceNodeUid;
    }
    if (other.TargetNodeUid.Length != 0) {
      TargetNodeUid = other.TargetNodeUid;
    }
    if (other.IsActive != false) {
      IsActive = other.IsActive;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 18: {
          SourceNodeUid = input.ReadString();
          break;
        }
        case 26: {
          TargetNodeUid = input.ReadString();
          break;
        }
        case 32: {
          IsActive = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
