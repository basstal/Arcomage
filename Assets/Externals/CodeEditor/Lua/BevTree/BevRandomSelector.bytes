local BevConst = require("BevTree/BevConst")
local BevNode = require("BevTree/BevNode")
local Calculator = require("GamePlay/BevTree/Calculator")

local BevRandomSelector = {__index = BevNode}
setmetatable(BevRandomSelector, BevRandomSelector)

function BevRandomSelector.ctor(data)
    local node = BevNode.ctor(BevRandomSelector, data)
    node.skipLog = true
    -- if data.selector == nil then
    --     node.abortMode = PBEnum["CodeEditor.BevAbortMode"].None
    -- else
    --     node.abortMode = data.selector.abortMode
    -- end
    node.prop = data.randomSelector
    node.nodeType = PBEnum["CodeEditor.BevNodeType"].RandomSelector
    node.name = "BevRandomSelector"
    return node
end

function BevRandomSelector:Reset()
    BevNode.Reset(self)
    self.currentRunning = 0
end

function BevRandomSelector:Run()
    if #self.children == 0 then
        return BevConst.RunState.Finished
    end

    if self.currentRunning == 0 and #self.children > 0 then
        local weightTotal = 0
        local rangeWeightMin = 0
        local weightRange = {}
        if self.prop.weights ~= nil then
            for _, weight in ipairs(self.prop.weights) do
                local evalValue = Calculator.evalNoFixed(self, weight, false)
                weightTotal = weightTotal + (evalValue or 0)
                table.insert(weightRange, weightTotal)
            end
        end
        if rangeWeightMin < weightTotal then
            local currentWeight = math.random(rangeWeightMin, weightTotal)
            local index
            for i, rangeWeight in ipairs(weightRange) do
                if currentWeight <= rangeWeight and currentWeight >= rangeWeightMin then
                    index = i
                    break
                end
                rangeWeightMin = rangeWeight
            end
            if index == nil then
                error("BevTree", string.format("随机数%s不在范围[0, %s]内？", currentWeight, weightTotal))
                return BevConst.RunState.Failed
            end
            self.currentRunning = index
        else
            self.currentRunning = 1
        end
    end

    -- self.currentRunning = self:AbortMode()
    local currentindex = self.currentRunning
    for i = currentindex, #self.children do
        self.currentRunning = i
        local childnode = self.children[i]
        local ret = childnode:Run()
        ret = childnode:RunDecorate(ret)
        childnode:LogRecord(ret)

        if ret == BevConst.RunState.Finished then
            self.currentRunning = 0
            return BevConst.RunState.Finished
        elseif ret == BevConst.RunState.Running then
            return BevConst.RunState.Running
        elseif ret == BevConst.RunState.Failed then
            if self.currentRunning == #self.children then
                self.currentRunning = 0
                return BevConst.RunState.Failed
            end
        end
    end

    return BevConst.RunState.Finished
end

return BevRandomSelector
