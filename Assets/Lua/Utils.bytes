local U = {}

function U.ResChange(player, type, change)
    local gamePlayerCS = player.GamePlayerCS
    if type == CS.CostType.Brick then
        gamePlayerCS.brick = math.max(gamePlayerCS.brick + change, 0)
    elseif type == CS.CostType.Gem then
        gamePlayerCS.gem = math.max(gamePlayerCS.gem + change, 0)
    else
        gamePlayerCS.recruit = math.max(gamePlayerCS.recruit + change, 0)
    end
end

function U.BuildingChange(player, building, change)
    local gamePlayerCS = player.GamePlayerCS
    if building == "Wall" then
        gamePlayerCS.wall = gamePlayerCS.wall + change
    else
        gamePlayerCS.tower = gamePlayerCS.tower + change
    end
end

function U.GrowthChange(player, type, change)
    local gamePlayerCS = player.GamePlayerCS
    change = math.ceil(change)
    if type == CS.CostType.Brick then
        gamePlayerCS.brickIncRate = gamePlayerCS.brickIncRate + change
    elseif type == CS.CostType.Gem then
        gamePlayerCS.gemIncRate = gamePlayerCS.gemIncRate + change
    else
        gamePlayerCS.recruitIncRate = gamePlayerCS.recruitIncRate + change
    end
end

function U.CauseDamage(player, damage)
    local target = U.GetEnemyPlayer(player)
    local gamePlayerCS = target.GamePlayerCS
    local wall = gamePlayerCS.wall
    if damage > wall then
        gamePlayerCS.wall = 0
        gamePlayerCS.tower = math.max(gamePlayerCS.tower + wall - damage, 0)
    else
        gamePlayerCS.wall = wall - damage
    end
    DB.TriggerEvent(string.format("Player%s/Refresh", gamePlayerCS.playerID))
end

function U.GetEnemyPlayer(player)
    local playerID = player.GamePlayerCS.playerID
    if playerID == 1 then
        return DB.GetData("Player2")
    else
        return DB.GetData("Player1")
    end
end

return U