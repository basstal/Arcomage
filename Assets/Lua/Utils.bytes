local U = {}
local ResourceType = CS.CostType

function U.ResChange(player, type, change)
    if change == 0 then
        return
    end
    local gamePlayerCS = player.GamePlayerCS
    if type == ResourceType.Brick then
        gamePlayerCS.brick = math.max(gamePlayerCS.brick + change, 0)
        if change > 0 then
            player.REF.BricksAddEffect:Play()
        else
            player.REF.BricksDropEffect:Play()
        end
    elseif type == ResourceType.Gem then
        gamePlayerCS.gem = math.max(gamePlayerCS.gem + change, 0)
        if change > 0 then
            player.REF.GemsAddEffect:Play()
        else
            player.REF.GemsDropEffect:Play()
        end
    else
        gamePlayerCS.recruit = math.max(gamePlayerCS.recruit + change, 0)
        if change > 0 then
            player.REF.RecruitsAddEffect:Play()
        else
            player.REF.RecruitsDropEffect:Play()
        end
    end
    DB.TriggerEvent(string.format("Player%s/Refresh", gamePlayerCS.playerID))
end

function U.BuildingChange(player, building, change)
    if change == 0 then
        return
    end
    local gamePlayerCS = player.GamePlayerCS
    if building == "Wall" then
        gamePlayerCS.wall = gamePlayerCS.wall + change
        if change > 0 then
            player.REF.WallAddEffect:Play()
        else
            player.REF.WallDropEffect:Play()
        end
    else
        gamePlayerCS.tower = gamePlayerCS.tower + change
        if change > 0 then
            player.REF.TowerAddEffect:Play()
        else
            player.REF.TowerDropEffect:Play()
        end
    end
    DB.TriggerEvent(string.format("Player%s/Refresh", gamePlayerCS.playerID))
end

function U.GrowthChange(player, type, change)
    if change == 0 then
        return
    end
    local gamePlayerCS = player.GamePlayerCS
    if type == ResourceType.Brick then
        gamePlayerCS.brickIncRate = gamePlayerCS.brickIncRate + change
        if change > 0 then
            player.REF.BricksIncRateAnimation:DORestartById("startInc")
        else
            player.REF.BricksDecRateAnimation:DORestartById("startDec")
        end
    elseif type == ResourceType.Gem then
        gamePlayerCS.gemIncRate = gamePlayerCS.gemIncRate + change
        if change > 0 then
            player.REF.GemsIncRateAnimation:DORestartById("startInc")
        else
            player.REF.GemsDecRateAnimation:DORestartById("startDec")
        end
    else
        gamePlayerCS.recruitIncRate = gamePlayerCS.recruitIncRate + change
        if change > 0 then
            player.REF.RecruitsIncRateAnimation:DORestartById("startInc")
        else
            player.REF.RecruitsDecRateAnimation:DORestartById("startDec")
        end
    end
    DB.TriggerEvent(string.format("Player%s/Refresh", gamePlayerCS.playerID))
end

function U.CauseDamage(player, damage, direct)
    local target = U.GetEnemyPlayer(player)
    local gamePlayerCS = target.GamePlayerCS
    local wall = gamePlayerCS.wall
    -- ** 直接对塔楼的伤害
    if direct then
        U.BuildingChange(target, "Tower", -damage)
    else
        if damage > wall then
            -- ** 如果伤害大于城墙，溢出的伤害由塔楼承受
            U.BuildingChange(target, "Wall", -wall)
            U.BuildingChange(target, "Tower", -(damage - wall))
        else
            -- ** 若干伤害小于等于城墙，则城墙承受全部伤害
            U.BuildingChange(target, "Wall", -damage)
        end
    end
    DB.TriggerEvent(string.format("Player%s/Refresh", gamePlayerCS.playerID))
end

function U.GetEnemyPlayer(player)
    local playerID = player.GamePlayerCS.playerID
    if playerID == 1 then
        return DB.GetData("Player2")
    else
        return DB.GetData("Player1")
    end
end

function U.HandleCost(player, type, count)
    if type == ResourceType.Brick then
        return player.GamePlayerCS.brick - count
    elseif type == ResourceType.Gem then
        return player.GamePlayerCS.gem - count
    else
        return player.GamePlayerCS.recruit - count
    end
end

function U.PlayerResourceGrowth(player, type)
    local gamePlayerCS = player.GamePlayerCS
    if type == ResourceType.Brick then
        gamePlayerCS.brick = gamePlayerCS.brick + gamePlayerCS.brickIncRate
    elseif type == ResourceType.Recruit then
        gamePlayerCS.recruit = gamePlayerCS.recruit + gamePlayerCS.recruitIncRate
    elseif type == ResourceType.Gem then
        gamePlayerCS.gem = gamePlayerCS.gem + gamePlayerCS.gemIncRate
    end
end

function U.PlayerResourceGrowthAll(player)
    U.PlayerResourceGrowth(player, ResourceType.Recruit)
    U.PlayerResourceGrowth(player, ResourceType.Gem)
    U.PlayerResourceGrowth(player, ResourceType.Brick)
    local gamePlayerCS = player.GamePlayerCS
    DB.TriggerEvent(string.format("Player%s/Refresh", gamePlayerCS.playerID))
end

function U.ValidCardCost(player, card)
    local costData = card.cost
    local left = U.HandleCost(player, costData.type, costData.count)
    return left >= 0
end

return U
