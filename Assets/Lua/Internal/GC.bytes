local GC = {}

function GC.restart()
    collectgarbage("setpause", 200)
    collectgarbage("setstepmul", 200)
    collectgarbage("restart")
end

function GC.stop()
    collectgarbage("stop")
end

function GC.count()
    return collectgarbage("count")
end

function GC.collect()
    collectgarbage("collect")
    --[[
    Because of resurrection, Lua collects objects with finalizers in two phases. The first time the collector
    detects that an object with a finalizer is not reachable, the collector resurrects the object and queues it to
    be finalized. Once its finalizer runs, Lua marks the object as finalized. The next time the collector detects
    that the object is not reachable, it deletes the object. If we want to ensure that all garbage in our program
    has been actually released, we must call collectgarbage twice; the second call will delete the objects
    that were finalized during the first call.
    --]]
    collectgarbage("collect")
end

return GC