local BevConst = require("AI/BevTree/BevConst")
local BevNode = require("AI/BevTree/BevNode")

local BevSequencer = {__index = BevNode}
setmetatable(BevSequencer, BevSequencer)

function BevSequencer.ctor(data)
    local node = BevNode.ctor(BevSequencer, data)
    node.skipLog = true
    -- if data.sequence == nil then
    --     node.abortMode = PBEnum["CodeEditor.BevAbortMode"].None
    -- else
    --     node.abortMode = data.sequence.abortMode
    -- end
    -- node.nodeType = PBEnum["CodeEditor.BevNodeType"].Composite
    node.name = "BevSequencer"
    return node
end

function BevSequencer:Reset()
    BevNode.Reset(self)
    self.currentRunning = 0
end

function BevSequencer:Run()
    -- warning("self", vardump(self))
    if #self.children == 0 then
        return BevConst.RunState.Finished
    end

    if self.currentRunning == 0 and #self.children > 0 then
        self.currentRunning = 1
    end

    -- self.currentRunning = self:AbortMode()
    local currentindex = self.currentRunning
    for i = currentindex, #self.children do
        self.currentRunning = i
        local childnode = self.children[i]
        local ret = childnode:Run()
        -- ret = childnode:RunDecorate(ret)
        childnode:LogRecord(ret)

        if ret == BevConst.RunState.Finished then
            if self.currentRunning == #self.children then
                self.currentRunning = 0
                return BevConst.RunState.Finished
            end
        elseif ret == BevConst.RunState.Running then
            return BevConst.RunState.Running
        elseif ret == BevConst.RunState.Failed then
            self.currentRunning = 0
            return BevConst.RunState.Failed
        end
    end

    return BevConst.RunState.Finished
end

return BevSequencer
