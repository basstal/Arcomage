local card
local player
local U = require("Utils")
local EmptyTable = {}

function Awake()
    print("awake card")
    REF.UseCardButton:BindButtonEvent(UseCard)
end

function Init(p, c)
    -- REF.Button
    -- REF.Button.Image.color = color
    print(p.sprite)
    REF.Button.Image.sprite = p.sprite
    player = p
    card = c
    REF.Id.TextMeshProUGUI.text = string.format("%s-%s", card.cardCS.Id, card.uid)

    local costText = ""
    -- for i = 0, card.cardCS.Costs.Count - 1 do
    --     local cost = card.cardCS.Costs[i]
    --     costText = costText .. type2String[cost.Type] .. "(" .. cost.Count .. ")\n"
    -- end
    REF.Cost.TextMeshProUGUI.text = costText
    REF.Func.TextMeshProUGUI.text = card.note

    local result = U.ValidCardCost(player, card)
    if result then
        print(string.format("play tween uid : %s", card.uid))
        REF.root.DOTweenAnimation:DORestart()
    else
        print(string.format("stop tween uid : %s", card.uid))
        REF.root.DOTweenAnimation:DOPause()
    end
end

function Init1(id)
    local sourceData
    if id == nil then
        local count = #DataAllArr
        local index = math.random(1, count)
        sourceData = DataAllArr[index]
        id = sourceData.id
    else
        sourceData = DataAllDict[id]
    end
    if sourceData == nil then
        error(string.format("未找到id为%s的卡数据源，初始化失败", id))
        return
    end
    self.id = id
    self.name = sourceData.name
    for _, cost in pairs(sourceData.costs) do
        local card = CS.Card.Types.Cost()
        card.Type = cost.type
        card.Count = cost.count
        self.costs:Add(card)
    end
    self.func = sourceData.func
    self.note = sourceData.note
end

function __tostring()
    return string.format("uid(%s) : %s", self.uid, self.id)
end

function UseCard()
    if card == nil then
        error("卡面为空数据？？")
        return
    end

    local sd = CS.UnityEngine.GameObject.Find("Fight"):GetComponent(typeof(CS.LuaBehaviour)).sandbox
    local FightLua = sd.FightLua
    if FightLua.CurrentStage == sd.WaitPlayer then
        local player = FightLua.players[FightLua.currentPlayer]
        local valid = U.ValidCardCost(player, card)
        if valid then
            print(card)
            local resources = U.HandlePlayerResources(player)
            for i = 0, card.cardCS.Costs.Count - 1 do
                local cost = card.cardCS.Costs[i]
                local res = resources[cost.Type]
                res.Count = res.Count - cost.Count
            end
            local result = card.func(player) or EmptyTable
            U.RemoveHandCard(player, card)
            -- print("remove index : " .. tostring(index))
            -- print("剩余数量 ： " .. tostring(#player.handCards))
            -- for i, c in pairs(player.handCards) do
            --     print("index ".. tostring(i) .. " card " .. tostring(c))
            -- end

            U.RefreshPlayerUI(player)
            if result.enemyInfoRefresh then
                local target = U.GetEnemyPlayer(player)
                U.RefreshPlayerUI(target)
            end
            sd.PlayerSwitch(result.playAgain)
        else
            warning("资源不够使用该卡牌")
        end
    end
end