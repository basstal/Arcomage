local Data = require("Cards/Card")
GamePlayerCS = nil
local m_handCards = {}

local function RepositionRoof(roofTrans, bodyImage)
    local position = roofTrans.localPosition
    local parentImage = roofTrans.parent:GetComponent(typeof(CS.UnityEngine.UI.Image))
    position.y = parentImage.preferredHeight / 2 + bodyImage.preferredHeight * bodyImage.fillAmount
    roofTrans.localPosition = position
end

function Awake()
    GamePlayerCS = this:GetComponent(typeof(CS.GamePlayer))
    DB.RegisterEvent("Player/GenHandCards", OnGenHandCards)
    DB.RegisterEvent("Player/RecycleHandCards", OnRecycleHandCards)
    DB.RegisterEvent(string.format("Player%s/Refresh", GamePlayerCS.playerID), OnRefresh)
end

function OnRefresh()
    warning("Player%s fresh", GamePlayerCS.playerID)
    local GetString = CS.LocaleManager.GetString
    REF.BricksCountTMP.text = GetString("BrickCount", GamePlayerCS.brick)
    REF.GemsCountTMP.text = GetString("GemsCount", GamePlayerCS.gem)
    REF.RecruitsCountTMP.text = GetString("RecuritsCount", GamePlayerCS.recruit)
    local tower = GamePlayerCS.tower
    REF.TowerScoreTMP.text = GetString("SingleScore", tower)
    local wall = GamePlayerCS.wall
    REF.WallScoreTMP.text = GetString("SingleScore", wall)
    REF.BricksIncRateTMP.text = GetString("IncRate", GamePlayerCS.brickIncRate)
    REF.GemsIncRateTMP.text = GetString("IncRate", GamePlayerCS.gemIncRate)
    REF.RecruitsIncRateTMP.text = GetString("IncRate", GamePlayerCS.recruitIncRate)
    REF.PlayerNameTMP.text = GamePlayerCS.playerName

    local hasTower = tower > 0
    REF.TowerRoof:SetActive(hasTower)
    if hasTower then
        REF.TowerBodyImage.fillAmount =
            math.max(tower / CS.GamePlayer.TOWER_MAX_FILL_AMOUNT_SCORE, CS.GamePlayer.TOWER_MIN_FILL_AMOUNT)
        RepositionRoof(REF.TowerRoof.transform, REF.TowerBodyImage)
    else
        REF.TowerBodyImage.fillAmount = 0
    end

    local hasWall = wall > 0
    REF.WallRoof:SetActive(hasWall)
    if hasWall then
        REF.WallBodyImage.fillAmount =
            math.max(wall / CS.GamePlayer.WALL_MAX_FILL_AMOUNT_SCORE, CS.GamePlayer.WALL_MIN_FILL_AMOUNT)
        RepositionRoof(REF.WallRoof.transform, REF.WallBodyImage)
    else
        REF.WallBodyImage.fillAmount = 0
    end
end

function Start()
    OnRefresh()
    local key = string.format("Player%s", GamePlayerCS.playerID)
    DB.SetData(key, _ENV)
    warning("key => _ENV", vardump(key) .. " \n ENV:\n" .. vardump(_ENV))
end

function RemoveFromHandCards(cardData)
    for i = #m_handCards, 1, -1 do
        if m_handCards[i] == cardData then
            table.remove(m_handCards, i)
            break
        end
    end
end

function OnRecycleHandCards()
    local gameMain = DB.GetData("Main")
    local gameMainCS = gameMain.GameMainCS
    local cardObjCacheRoot = gameMainCS.CardObjCacheRoot
    for i = #m_handCards, 1, -1 do
        m_handCards[i].transform:SetParent(cardObjCacheRoot, false)
        table.remove(m_handCards, i)
    end
end

function OnGenHandCards(cardCount)
    local used = {}
    info(string.format("生成玩家%s 手牌张数%d ", GamePlayerCS.playerName, cardCount))
    local dataSize = #Data
    local gameMain = DB.GetData("Main")
    local gameMainCS = gameMain.GameMainCS
    local cardObjCacheRoot = gameMainCS.CardObjCacheRoot
    local ID2Sprite = gameMainCS.ID2Sprite
    local parentTrans = REF.HandCards.transform
    for _ = 1, cardCount do
        local index = math.random(1, dataSize)
        if used[index] == nil then
            if cardObjCacheRoot.childCount > 0 then
                local trans = cardObjCacheRoot:GetChild(0)
                trans:SetParent(parentTrans, false)
                local cardData = Data[index]
                cardData.sprite = ID2Sprite[cardData.id]
                cardData.transform = trans
                cardData.owner = GamePlayerCS.playerID
                local instanceId = trans.gameObject:GetInstanceID()
                DB.SetData(string.format("Card/Data/%s", instanceId), cardData)
                used[index] = true
                table.insert(m_handCards, cardData)
            else
                warning("GamePlay", "预设的(白板)卡牌数量已用完")
                return
            end
        end
    end
    info("GamePlay", string.format("当前玩家%s手牌%s => \n%s", GamePlayerCS.playerID, #m_handCards, vardump(m_handCards)))
    DB.SetData(string.format("Player%s/HandCards", GamePlayerCS.playerID), m_handCards)
end
