--[[
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
---------------------------------------------global-------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
]]
GamePlayerCS = nil

--[[
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
---------------------------------------------local--------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
]]
local Data = require("Cards/Card")
local m_handCards = {}

local function RepositionRoof(roofTrans, bodyImage)
    local position = roofTrans.localPosition
    local parentImage = roofTrans.parent:GetComponent(typeof(CS.UnityEngine.UI.Image))
    position.y = parentImage.preferredHeight / 2 + bodyImage.preferredHeight * bodyImage.fillAmount
    roofTrans.localPosition = position
end

--[[
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
---------------------------------------------function-----------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
]]
function Awake()
    GamePlayerCS = this:GetComponent(typeof(CS.GamePlayer))
    DB.RegisterEvent("Player/GenHandCards", OnGenHandCards)
    DB.RegisterEvent("Player/RecycleHandCards", OnRecycleHandCards)
    DB.RegisterEvent(string.format("Player%s/Refresh", GamePlayerCS.playerID), OnRefresh)
    DB.RegisterEvent(string.format("Player%s/RecycleAll", GamePlayerCS.playerID), OnRecycleAll)
end

function Start()
    OnRefresh()
    local key = string.format("Player%s", GamePlayerCS.playerID)
    DB.SetData(key, _ENV)
end

function OnRefresh()
    local GetString = CS.LocaleManager.GetString
    REF.BricksCountTMP.text = GetString("BrickCount", GamePlayerCS.brick)
    REF.GemsCountTMP.text = GetString("GemsCount", GamePlayerCS.gem)
    REF.RecruitsCountTMP.text = GetString("RecruitsCount", GamePlayerCS.recruit)
    local tower = GamePlayerCS.tower
    REF.TowerScoreTMP.text = GetString("SingleScore", tower)
    local wall = GamePlayerCS.wall
    REF.WallScoreTMP.text = GetString("SingleScore", wall)
    REF.BricksIncRateTMP.text = GetString("IncRate", GamePlayerCS.brickIncRate)
    REF.GemsIncRateTMP.text = GetString("IncRate", GamePlayerCS.gemIncRate)
    REF.RecruitsIncRateTMP.text = GetString("IncRate", GamePlayerCS.recruitIncRate)
    REF.PlayerNameTMP.text = GamePlayerCS.playerName

    local hasTower = tower > 0
    REF.TowerRoof:SetActive(hasTower)
    if hasTower then
        REF.TowerBodyImage.fillAmount =
            math.max(tower / CS.GamePlayer.TOWER_MAX_FILL_AMOUNT_SCORE, CS.GamePlayer.TOWER_MIN_FILL_AMOUNT)
        RepositionRoof(REF.TowerRoof.transform, REF.TowerBodyImage)
    else
        REF.TowerBodyImage.fillAmount = 0
    end

    local hasWall = wall > 0
    REF.WallRoof:SetActive(hasWall)
    if hasWall then
        REF.WallBodyImage.fillAmount =
            math.max(wall / CS.GamePlayer.WALL_MAX_FILL_AMOUNT_SCORE, CS.GamePlayer.WALL_MIN_FILL_AMOUNT)
        RepositionRoof(REF.WallRoof.transform, REF.WallBodyImage)
    else
        REF.WallBodyImage.fillAmount = 0
    end
end

function OnRecycleAll()
    for i = 1, #m_handCards do
        local handCard = m_handCards[i]
        if not handCard.using then
            local ref = handCard.REF
            local id = GamePlayerCS.playerID == 1 and "left2right" or "right2left"
            ref.DrawCard:DOPlayBackwardsById(id)
            ref.DrawCard:DOPlayBackwardsById("alpha")
        end
    end
end

function RemoveFromHandCards(cardData)
    local gameMain = DB.GetData("Main")
    local gameMainCS = gameMain.GameMainCS
    local cardObjCacheRoot = gameMainCS.CardObjCacheRoot
    for i = #m_handCards, 1, -1 do
        if m_handCards[i] == cardData then
            table.remove(m_handCards, i)
            if cardData.transform ~= nil then
                cardData.transform:SetParent(cardObjCacheRoot, false)
                cardData.transform = nil
            end
            return i
        end
    end
end

function OnRecycleHandCards()
    local gameMain = DB.GetData("Main")
    local gameMainCS = gameMain.GameMainCS
    local cardObjCacheRoot = gameMainCS.CardObjCacheRoot
    for i = #m_handCards, 1, -1 do
        local handCard = m_handCards[i]
        table.remove(m_handCards, i)
        if handCard.transform ~= nil then
            handCard.transform:SetParent(cardObjCacheRoot, false)
            handCard.transform = nil
        end
    end
end

function OnGenHandCards(genCount, fromIndex)
    info("生成玩家手牌", string.format("玩家：%s\n预定生成：%d张手牌\n玩家详情:%s", GamePlayerCS.playerName, genCount, vardump(_ENV)))
    local dataSize = #Data
    local gameMain = DB.GetData("Main")
    local gameMainCS = gameMain.GameMainCS
    local ID2Sprite = gameMainCS.ID2Sprite
    while genCount > 0 do
        local index = math.random(1, dataSize)
        local cardData = Data[index]
        local contains = false
        for _, handCard in pairs(m_handCards) do
            contains = handCard == cardData
            if contains then
                break
            end
        end
        if not contains then
            cardData.sprite = ID2Sprite[cardData.id]
            cardData.owner = GamePlayerCS.playerID
            table.insert(m_handCards, fromIndex or #m_handCards + 1, cardData)
            genCount = genCount - 1
        end
    end
    info("玩家手牌", string.format("玩家：%s\n总手牌：%s\n详情：%s", GamePlayerCS.playerID, #m_handCards, vardump(m_handCards)))
    DB.SetData(string.format("Player%s/HandCards", GamePlayerCS.playerID), m_handCards)
end
