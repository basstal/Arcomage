local Data = require("Card")
local GamePlayerCS

function Awake()
    GamePlayerCS = this:GetComponent(typeof(CS.GamePlayer))
    DB.RegisterEvent("Player/GenHandCards", OnGenHandCards)
end

local function RepositionRoof(roofTrans, bodyImage)
    local position = roofTrans.localPosition
    local parentImage = roofTrans.parent:GetComponent(typeof(CS.UnityEngine.UI.Image))
    position.y = parentImage.preferredHeight / 2 + bodyImage.preferredHeight * bodyImage.fillAmount
    roofTrans.localPosition = position
end

function Start()
    local GetString = CS.LocaleManager.GetString
    REF.BricksCountTMP.text = GetString("BrickCount", GamePlayerCS.brick)
    REF.GemsCountTMP.text = GetString("GemsCount", GamePlayerCS.gem)
    REF.RecruitsCountTMP.text = GetString("RecuritsCount", GamePlayerCS.recruit)
    local tower = GamePlayerCS.tower
    REF.TowerScoreTMP.text = GetString("SingleScore", tower)
    local wall = GamePlayerCS.wall
    REF.WallScoreTMP.text = GetString("SingleScore", wall)
    REF.PlayerNameTMP.text = GamePlayerCS.playerName

    local hasTower = tower > 0
    REF.TowerRoof:SetActive(hasTower)
    if hasTower then
        REF.TowerBodyImage.fillAmount = math.max(tower / GamePlayerCS.TOWER_MAX_FILL_AMOUNT_SCORE, GamePlayerCS.TOWER_MIN_FILL_AMOUNT)
        RepositionRoof(REF.TowerRoof.transform, REF.TowerBodyImage)
    else
        REF.TowerBodyImage.fillAmount = 0
    end


    local hasWall = wall > 0
    REF.WallRoof:SetActive(hasWall)
    if hasWall then
        RepositionRoof(REF.WallRoof.transform, REF.WallBodyImage);
        REF.WallBodyImage.fillAmount = math.max(wall / GamePlayerCS.WALL_MAX_FILL_AMOUNT_SCORE, GamePlayerCS.WALL_MIN_FILL_AMOUNT)
    else
        REF.WallBodyImage.fillAmount = 0
    end
end

function OnGenHandCards(GameMainCS, cardCount)
    local used = {}
    info(string.format("生成玩家%s 手牌张数%d ", GamePlayerCS.playerName, cardCount))
    local dataSize = #Data
    local cardObjCacheRoot = GameMainCS.CardObjCacheRoot
    local ID2Sprite = GameMainCS.ID2Sprite
    for _ = 1, cardCount do
        local index = math.random(1, dataSize)
        if used[index] == nil then
            if cardObjCacheRoot.childCount > 0 then
                local trans = cardObjCacheRoot:GetChild(0)
                trans.parent = REF.HandCards.transform
                local sourceData = Data[index]
                -- ** todo 对齐 id
                local tempId = sourceData.id - 7001
                warning(vardump(tempId))
                sourceData.sprite = ID2Sprite[tempId]
                local instanceId = trans.gameObject:GetInstanceID()
                DB.SetData("Card/AssignData/" .. tostring(instanceId), sourceData)
                used[index] = true
            else
                warning("GamePlay", "预设的(白板)卡牌数量已用完")
                return
            end
        end
    end
end
